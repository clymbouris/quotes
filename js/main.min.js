function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,n=Object.keys(model.data.quotes[t]).length,a=Math.floor(Math.random()*n),r=model.data.quotes[t][a];$("#quote").html(""),$("#quote").css({"font-size":"2.4em"}),e.currentQuote(r),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var n=Object.keys(t.query.pages)[0],a=t.query.pages[n].extract;$("#quote").html(""),$("#quote").css({"font-size":"1.2em"}),e.currentQuote(a),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){console.log("Copied to clipboard!")},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn(1e3)}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var n=e+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsIiQiLCJodG1sIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3aWtpQXV0aG9yIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiY29weUNvbmZpcm0iLCJjb25zb2xlIiwibG9nIiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwidGV4dCIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciIsInRlbXAiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFBQSxXQUFBQyxHQUVBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFFLGFBQUFDLEdBQUFDLFdBQUEsSUFDQUosRUFBQUssY0FBQUYsR0FBQUMsV0FBQSxJQUVBSixFQUFBTSxVQUFBLFdBR0FOLEVBQUFPLGFBQUFQLEVBQUFPLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQWpCLEVBQUFPLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUFFLEdBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFVBQUFFLEtBQUFDLFlBQUEsVUFDQTNCLEVBQUFFLGFBQUFxQixHQUNBdkIsRUFBQUssY0FBQWEsSUFHQWxCLEVBQUE0QixXQUFBLFdBQ0FDLE9BQUFDLEtBQUEsOEVBQ0FDLG1CQUFBLElBQUEvQixFQUFBRSxlQUFBLEtBQUFGLEVBQUFLLG1CQUdBTCxFQUFBZ0MsV0FBQSxXQUdBLEdBQUFDLEdBQUEsMEdBQUFqQyxFQUFBSyxnQkFBQSx5QkFFQTZCLEVBQUFDLFdBQUEsV0FDQW5DLEVBQUFFLGFBQUEsb0NBQ0FGLEVBQUFLLGNBQUEsVUFDQSxJQUVBbUIsR0FBQVksTUFDQUMsSUFBQUosRUFDQUssU0FBQSxRQUNBQyxRQUFBLFNBQUE1QixHQUNBLEdBQUE2QixHQUFBaEMsT0FBQUMsS0FBQUUsRUFBQThCLE1BQUFDLE9BQUEsR0FDQUMsRUFBQWhDLEVBQUE4QixNQUFBQyxNQUFBRixHQUFBSSxPQUVBcEIsR0FBQSxVQUFBQyxLQUFBLElBQ0FELEVBQUEsVUFBQUUsS0FBQUMsWUFBQSxVQUNBM0IsRUFBQUUsYUFBQXlDLEdBQ0EzQyxFQUFBSyxjQUFBLGFBRUF3QyxhQUFBWCxPQUtBbEMsRUFBQThDLFlBQUEsV0FDQUMsUUFBQUMsSUFBQSx5QkFJQWhELEVBQUFpRCxVQUFBLEdBQUFDLFdBQUEsY0FoR0EsR0FBQXhDLFFBQ0FDLEtBQUEsS0FDQXdDLEtBQUEsV0FDQTNCLEVBQUE0QixRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUE1QyxNQUFBQyxLQUFBMkMsRUFHQW5ELEdBQUFvRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBbkMsRUFBQWtDLEdBQUFFLE9BQ0F6RCxHQUFBb0QsZ0JBQUFNLEtBQUFKLE9BQUFDLEVBQUFDLEdBQ0FuQyxFQUFBa0MsR0FBQUksT0FBQSxNQUtBLElBQUFDLEdBQUEsR0FBQWpFLFVBQ0FLLElBQUE2RCxjQUFBRCxLQUVBRSxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBRUEsR0FBQXJFLEdBQUFvRSxFQUFBLEtBQUFDLENBRUFyQixTQUFBQyxJQUFBLG1CQUFBakQsR0FDQXlCLEVBQUEsVUFBQXFDLEtBQUE5RCxHQUNBeUIsRUFBQSxXQUFBcUMsS0FBQSw0QkFLQVEsSUFzRUEzRCxPQUFBeUMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVGV4dCA9IHtcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG5cdFx0XHQgICAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy50ZXh0LnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5mYWRlSW4oMTAwMCk7XG5cdFx0XHQgICAgfSAgICAgICAgXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDb250cnVjdCBWaWV3TW9kZWwgYWZ0ZXIgbW9kZWwgaXMgbG9hZGVkXG5cdFx0XHR2YXIgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cdFx0XHRrby5hcHBseUJpbmRpbmdzKHZtKTtcblx0XHR9KVxuXHRcdC5mYWlsKGZ1bmN0aW9uKCBqcXhociwgdGV4dFN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdHZhciBlcnIgPSB0ZXh0U3RhdHVzICsgXCIsIFwiICsgZXJyb3I7XG5cdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCBcIlJlcXVlc3QgRmFpbGVkOiBcIiArIGVyciApO1xuXHRcdFx0JCgnI3F1b3RlJykudGV4dChlcnIpO1xuXHRcdFx0JCgnI2F1dGhvcicpLnRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbnZhciB0ZW1wO1xuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZSAmIGF1dGhvclxuXHRcdCQoJyNxdW90ZScpLmh0bWwoJycpO1xuXHRcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMi40ZW0nIH0pO1xuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnXCIgJyArIHNlbGYuY3VycmVudEF1dGhvcigpKSk7XG4gICAgfTtcblxuXHRzZWxmLndpa2lBdXRob3IgPSBmdW5jdGlvbigpIHtcblx0XHRcblx0XHQvLyBBUEkgUmVxdWVzdCBVUkxcblx0XHR2YXIgd2lraVVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZwcm9wPWV4dHJhY3RzJmV4aW50cm89JmV4cGxhaW50ZXh0PSZ0aXRsZXM9JyArIHNlbGYuY3VycmVudEF1dGhvcigpICsgJyZjYWxsYmFjaz13aWtpQ2FsbGJhY2snO1xuXG5cdCAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRRdW90ZSgnQ291bGQgbm90IGxvYWQgV2lraXBlZGlhIGFydGljbGUnKTtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRBdXRob3IoJ2Vycm9yJyk7XG5cdFx0fSwgMzAwMCk7XG5cblx0ICAgICAkLmFqYXgoIHtcblx0ICAgICAgICB1cmw6IHdpa2lVcmwsXG5cdCAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG5cdCAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICAgIFx0dmFyIHBhZ2VzTm8gPSBPYmplY3Qua2V5cyhkYXRhLnF1ZXJ5LnBhZ2VzKVswXTtcblx0ICAgICAgICBcdHZhciBhcnRpY2xlID0gZGF0YS5xdWVyeS5wYWdlc1twYWdlc05vXS5leHRyYWN0O1xuXHQgICAgICAgIFx0Ly8gQ2xlYXIgcXVvdGUgYW5kIGF1dGhvclxuXHRcdFx0XHQkKCcjcXVvdGUnKS5odG1sKCcnKTtcblx0ICAgICAgICBcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMS4yZW0nIH0pO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50UXVvdGUoYXJ0aWNsZSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRBdXRob3IoJ1dpa2lwZWRpYScpO1xuXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXF1ZXN0VGltZW91dCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH07XG5cblx0c2VsZi5jb3B5Q29uZmlybSA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdDb3BpZWQgdG8gY2xpcGJvYXJkIScpO1xuXHR9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG59XG5cblxuLy8gLS0gSW5pdGlhbGl6ZSBDb21wb25lbnRzIC0tIC8vXG5cbm1vZGVsLmluaXQoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
