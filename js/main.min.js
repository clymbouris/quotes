function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){$("#quote").html(""),$("#author").html(""),t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,r=Object.keys(model.data.quotes[e]).length,n=Math.floor(Math.random()*r),a=model.data.quotes[e][n];$("#quote").css({"font-size":"2.4em"}),t.currentQuote(a),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))},t.clipboard=new Clipboard("#clipboard"),t.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),t.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),t.wiki=function(){$("#quote").html(""),$("#author").html("");var e="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+t.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){t.currentQuote("Could not load Wikipedia article"),t.currentAuthor("error")},3e3);$.ajax({url:e,dataType:"jsonp",success:function(e){var r=Object.keys(e.query.pages)[0],n=e.query.pages[r].extract;$("#quote").css({"font-size":"1.2em"}),t.currentQuote(n),t.currentAuthor("Wikipedia"),clearTimeout(o)}})}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t)}).fail(function(e,t,o){var r=t+", "+o;console.log("Request Failed: "+r),$("#quote").text(r),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCIkIiwiaHRtbCIsImF1dGhvcnNNYXgiLCJPYmplY3QiLCJrZXlzIiwibW9kZWwiLCJkYXRhIiwiYXV0aG9ycyIsImxlbmd0aCIsImFSYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhdXRob3IiLCJuYW1lIiwicXVvdGVzTWF4IiwicXVvdGVzIiwicVJhbmRvbSIsInF1b3RlIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJjbGlwYm9hcmQiLCJDbGlwYm9hcmQiLCJvbiIsImUiLCJjb25zb2xlIiwibG9nIiwiYWN0aW9uIiwidGV4dCIsInRyaWdnZXIiLCJjbGVhclNlbGVjdGlvbiIsImVycm9yIiwid2lraSIsIndpa2lVcmwiLCJyZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwicGFnZXNObyIsInF1ZXJ5IiwicGFnZXMiLCJhcnRpY2xlIiwiZXh0cmFjdCIsImNsZWFyVGltZW91dCIsImluaXQiLCJnZXRKU09OIiwiZG9uZSIsImpzb24iLCJiaW5kaW5nSGFuZGxlcnMiLCJmYWRlVGV4dCIsInVwZGF0ZSIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwiaGlkZSIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJ0ZW1wIl0sIm1hcHBpbmdzIjoiQUF1Q0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUVBQyxFQUFBLFVBQUFDLEtBQUEsSUFDQUQsRUFBQSxXQUFBQyxLQUFBLElBRUFSLEVBQUFTLGFBQUFULEVBQUFTLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQW5CLEVBQUFTLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUFqQixHQUFBLFVBQUFtQixLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBdUIsR0FDQXpCLEVBQUFLLGNBQUFlLElBR0FwQixFQUFBNEIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBL0IsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFJQUwsRUFBQWdDLFVBQUEsR0FBQUMsV0FBQSxjQUNBakMsRUFBQWdDLFVBQUFFLEdBQUEsVUFBQSxTQUFBQyxHQUNBQyxRQUFBQyxJQUFBLFVBQUFGLEVBQUFHLFFBQ0FGLFFBQUFDLElBQUEsUUFBQUYsRUFBQUksTUFDQUgsUUFBQUMsSUFBQSxXQUFBRixFQUFBSyxTQUVBTCxFQUFBTSxtQkFFQXpDLEVBQUFnQyxVQUFBRSxHQUFBLFFBQUEsU0FBQUMsR0FDQUMsUUFBQU0sTUFBQSxVQUFBUCxFQUFBRyxRQUNBRixRQUFBTSxNQUFBLFdBQUFQLEVBQUFLLFdBR0F4QyxFQUFBMkMsS0FBQSxXQUVBcEMsRUFBQSxVQUFBQyxLQUFBLElBQ0FELEVBQUEsV0FBQUMsS0FBQSxHQUVBLElBQUFvQyxHQUFBLDBHQUFBNUMsRUFBQUssZ0JBQUEseUJBRUF3QyxFQUFBQyxXQUFBLFdBQ0E5QyxFQUFBRSxhQUFBLG9DQUNBRixFQUFBSyxjQUFBLFVBQ0EsSUFFQUUsR0FBQXdDLE1BQ0FDLElBQUFKLEVBQ0FLLFNBQUEsUUFDQUMsUUFBQSxTQUFBckMsR0FDQSxHQUFBc0MsR0FBQXpDLE9BQUFDLEtBQUFFLEVBQUF1QyxNQUFBQyxPQUFBLEdBQ0FDLEVBQUF6QyxFQUFBdUMsTUFBQUMsTUFBQUYsR0FBQUksT0FDQWhELEdBQUEsVUFBQW1CLEtBQUFDLFlBQUEsVUFDQTNCLEVBQUFFLGFBQUFvRCxHQUNBdEQsRUFBQUssY0FBQSxhQUVBbUQsYUFBQVgsT0FyR0EsR0FBQWpDLFFBQ0FDLEtBQUEsS0FDQTRDLEtBQUEsV0FDQWxELEVBQUFtRCxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUFoRCxNQUFBQyxLQUFBK0MsRUFHQXpELEdBQUEwRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBMUQsRUFBQXlELEdBQUFFLE9BQ0EvRCxHQUFBMEQsZ0JBQUF0QixLQUFBd0IsT0FBQUMsRUFBQUMsR0FDQTFELEVBQUF5RCxHQUFBRyxPQUFBLE1BS0EsSUFBQUMsR0FBQSxHQUFBdEUsVUFDQUssSUFBQWtFLGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQTlCLEdBRUEsR0FBQTNDLEdBQUF5RSxFQUFBLEtBQUE5QixDQUVBTixTQUFBQyxJQUFBLG1CQUFBdEMsR0FDQVEsRUFBQSxVQUFBZ0MsS0FBQXhDLEdBQ0FRLEVBQUEsV0FBQWdDLEtBQUEsNEJBS0FrQyxJQThFQTdELE9BQUE2QyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVUZXh0ID0ge1xuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigxMDAwKTtcblx0XHRcdCAgICB9ICAgICAgICBcblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxudmFyIHRlbXA7XG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gQ2xlYXIgcXVvdGUgYW5kIGF1dGhvclxuXHRcdCQoJyNxdW90ZScpLmh0bWwoJycpO1xuXHRcdCQoJyNhdXRob3InKS5odG1sKCcnKTtcblx0XHQvLyBHZXQgcmFuZG9tIGF1dGhvclxuXHRcdGlmICghc2VsZi5hdXRob3JzTWF4KSBzZWxmLmF1dGhvcnNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLmF1dGhvcnMpLmxlbmd0aDtcblx0XHR2YXIgYVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNlbGYuYXV0aG9yc01heCk7XG5cdFx0dmFyIGF1dGhvciA9IG1vZGVsLmRhdGEuYXV0aG9yc1thUmFuZG9tXS5uYW1lO1xuXHRcdC8vIEdldCByYW5kb20gcXVvdGUgZnJvbSBhdXRob3Jcblx0XHR2YXIgcXVvdGVzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV0pLmxlbmd0aDtcblx0XHR2YXIgcVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc01heCk7XG5cdFx0dmFyIHF1b3RlID0gbW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV1bcVJhbmRvbV07XG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcXVvdGUgJiBhdXRob3Jcblx0XHQkKCcjcXVvdGUnKS5jc3MoeyAnZm9udC1zaXplJzogJzIuNGVtJyB9KTtcblx0XHRzZWxmLmN1cnJlbnRRdW90ZShxdW90ZSk7XG5cdFx0c2VsZi5jdXJyZW50QXV0aG9yKGF1dGhvcik7XG5cdH07XG5cblx0c2VsZi50d2VldFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93Lm9wZW4oJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P2hhc2h0YWdzPXF1b3RlcyZyZWxhdGVkPWZyZWVjb2RlY2FtcCZ0ZXh0PScgK1xuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCdcIicgKyBzZWxmLmN1cnJlbnRRdW90ZSgpICsgJ1wiICcgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSkpO1xuICAgIH07XG5cbiAgICAvLyBJbml0aWFsaXplIENsaXBib2FyZFxuXHRzZWxmLmNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJyNjbGlwYm9hcmQnKTtcblx0c2VsZi5jbGlwYm9hcmQub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbihlKSB7XG4gICAgXHRjb25zb2xlLmxvZygnQWN0aW9uOicsIGUuYWN0aW9uKTtcblx0ICAgIGNvbnNvbGUubG9nKCdUZXh0OicsIGUudGV4dCk7XG5cdCAgICBjb25zb2xlLmxvZygnVHJpZ2dlcjonLCBlLnRyaWdnZXIpO1xuXG5cdCAgICBlLmNsZWFyU2VsZWN0aW9uKCk7XG5cdH0pO1xuXHRzZWxmLmNsaXBib2FyZC5vbignZXJyb3InLCBmdW5jdGlvbihlKSB7XG5cdCAgICBjb25zb2xlLmVycm9yKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHQgICAgY29uc29sZS5lcnJvcignVHJpZ2dlcjonLCBlLnRyaWdnZXIpO1xuXHR9KTtcblxuXHRzZWxmLndpa2kgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBDbGVhciBxdW90ZSBhbmQgYXV0aG9yXG5cdFx0JCgnI3F1b3RlJykuaHRtbCgnJyk7XG5cdFx0JCgnI2F1dGhvcicpLmh0bWwoJycpO1xuXHRcdC8vIEFQSSBSZXF1ZXN0IFVSTFxuXHRcdHZhciB3aWtpVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/Zm9ybWF0PWpzb24mYWN0aW9uPXF1ZXJ5JnByb3A9ZXh0cmFjdHMmZXhpbnRybz0mZXhwbGFpbnRleHQ9JnRpdGxlcz0nICsgc2VsZi5jdXJyZW50QXV0aG9yKCkgKyAnJmNhbGxiYWNrPXdpa2lDYWxsYmFjayc7XG5cblx0ICAgIHZhciByZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGYuY3VycmVudFF1b3RlKCdDb3VsZCBub3QgbG9hZCBXaWtpcGVkaWEgYXJ0aWNsZScpO1xuXHQgICAgICAgIHNlbGYuY3VycmVudEF1dGhvcignZXJyb3InKTtcblx0XHR9LCAzMDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogd2lraVVybCxcblx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgICAgXHR2YXIgcGFnZXNObyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpWzBdO1xuXHQgICAgICAgIFx0dmFyIGFydGljbGUgPSBkYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VzTm9dLmV4dHJhY3Q7XG5cdCAgICAgICAgXHQkKCcjcXVvdGUnKS5jc3MoeyAnZm9udC1zaXplJzogJzEuMmVtJyB9KTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudFF1b3RlKGFydGljbGUpO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50QXV0aG9yKCdXaWtpcGVkaWEnKTtcblxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVxdWVzdFRpbWVvdXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9O1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
