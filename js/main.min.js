function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,r=Object.keys(model.data.quotes[e]).length,n=Math.floor(Math.random()*r),a=model.data.quotes[e][n];$("#quote").css({"font-size":"2.4em"}),t.currentQuote(a),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))},t.clipboard=new Clipboard("#clipboard"),t.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),t.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),t.wiki=function(){var e="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+t.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){t.currentQuote("Could not load Wikipedia article"),t.currentAuthor("error")},3e3);$.ajax({url:e,dataType:"jsonp",success:function(e){var r=Object.keys(e.query.pages)[0],n=e.query.pages[r].extract;$("#quote").css({"font-size":"1.2em"}),t.currentQuote(n),t.currentAuthor("Wikipedia"),clearTimeout(o)}})}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t)}).fail(function(e,t,o){var r=t+", "+o;console.log("Request Failed: "+r),$("#quote").text(r),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsIiQiLCJjc3MiLCJmb250LXNpemUiLCJ0d2VldFF1b3RlIiwid2luZG93Iiwib3BlbiIsImVuY29kZVVSSUNvbXBvbmVudCIsImNsaXBib2FyZCIsIkNsaXBib2FyZCIsIm9uIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJhY3Rpb24iLCJ0ZXh0IiwidHJpZ2dlciIsImNsZWFyU2VsZWN0aW9uIiwiZXJyb3IiLCJ3aWtpIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwiZmFkZUluIiwidm0iLCJhcHBseUJpbmRpbmdzIiwiZmFpbCIsImpxeGhyIiwidGV4dFN0YXR1cyIsInRlbXAiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFBQSxXQUFBQyxHQUVBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFFLGFBQUFDLEdBQUFDLFdBQUEsSUFDQUosRUFBQUssY0FBQUYsR0FBQUMsV0FBQSxJQUVBSixFQUFBTSxVQUFBLFdBRUFOLEVBQUFPLGFBQUFQLEVBQUFPLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQWpCLEVBQUFPLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUFFLEdBQUEsVUFBQUMsS0FBQUMsWUFBQSxVQUNBMUIsRUFBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQTJCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQTlCLEVBQUFFLGVBQUEsS0FBQUYsRUFBQUssbUJBSUFMLEVBQUErQixVQUFBLEdBQUFDLFdBQUEsY0FDQWhDLEVBQUErQixVQUFBRSxHQUFBLFVBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxVQUFBRixFQUFBRyxRQUNBRixRQUFBQyxJQUFBLFFBQUFGLEVBQUFJLE1BQ0FILFFBQUFDLElBQUEsV0FBQUYsRUFBQUssU0FFQUwsRUFBQU0sbUJBRUF4QyxFQUFBK0IsVUFBQUUsR0FBQSxRQUFBLFNBQUFDLEdBQ0FDLFFBQUFNLE1BQUEsVUFBQVAsRUFBQUcsUUFDQUYsUUFBQU0sTUFBQSxXQUFBUCxFQUFBSyxXQUdBdkMsRUFBQTBDLEtBQUEsV0FFQSxHQUFBQyxHQUFBLDBHQUFBM0MsRUFBQUssZ0JBQUEseUJBRUF1QyxFQUFBQyxXQUFBLFdBQ0E3QyxFQUFBRSxhQUFBLG9DQUNBRixFQUFBSyxjQUFBLFVBQ0EsSUFFQW1CLEdBQUFzQixNQUNBQyxJQUFBSixFQUNBSyxTQUFBLFFBQ0FDLFFBQUEsU0FBQXRDLEdBQ0EsR0FBQXVDLEdBQUExQyxPQUFBQyxLQUFBRSxFQUFBd0MsTUFBQUMsT0FBQSxHQUNBQyxFQUFBMUMsRUFBQXdDLE1BQUFDLE1BQUFGLEdBQUFJLE9BQ0E5QixHQUFBLFVBQUFDLEtBQUFDLFlBQUEsVUFDQTFCLEVBQUFFLGFBQUFtRCxHQUNBckQsRUFBQUssY0FBQSxhQUVBa0QsYUFBQVgsT0EvRkEsR0FBQWxDLFFBQ0FDLEtBQUEsS0FDQTZDLEtBQUEsV0FDQWhDLEVBQUFpQyxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUFqRCxNQUFBQyxLQUFBZ0QsRUFHQXhELEdBQUF5RCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBeEMsRUFBQXVDLEdBQUFFLE9BQ0E5RCxHQUFBeUQsZ0JBQUF0QixLQUFBd0IsT0FBQUMsRUFBQUMsR0FDQXhDLEVBQUF1QyxHQUFBRyxPQUFBLE1BS0EsSUFBQUMsR0FBQSxHQUFBckUsVUFDQUssSUFBQWlFLGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQTlCLEdBRUEsR0FBQTFDLEdBQUF3RSxFQUFBLEtBQUE5QixDQUVBTixTQUFBQyxJQUFBLG1CQUFBckMsR0FDQXlCLEVBQUEsVUFBQWMsS0FBQXZDLEdBQ0F5QixFQUFBLFdBQUFjLEtBQUEsNEJBS0FrQyxJQXdFQTlELE9BQUE4QyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVUZXh0ID0ge1xuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigxMDAwKTtcblx0XHRcdCAgICB9ICAgICAgICBcblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxudmFyIHRlbXA7XG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcyLjRlbScgfSk7XG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG5cdHNlbGYuY2xpcGJvYXJkLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuICAgIFx0Y29uc29sZS5sb2coJ0FjdGlvbjonLCBlLmFjdGlvbik7XG5cdCAgICBjb25zb2xlLmxvZygnVGV4dDonLCBlLnRleHQpO1xuXHQgICAgY29uc29sZS5sb2coJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblxuXHQgICAgZS5jbGVhclNlbGVjdGlvbigpO1xuXHR9KTtcblx0c2VsZi5jbGlwYm9hcmQub24oJ2Vycm9yJywgZnVuY3Rpb24oZSkge1xuXHQgICAgY29uc29sZS5lcnJvcignQWN0aW9uOicsIGUuYWN0aW9uKTtcblx0ICAgIGNvbnNvbGUuZXJyb3IoJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblx0fSk7XG5cblx0c2VsZi53aWtpID0gZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgd2lraVVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZwcm9wPWV4dHJhY3RzJmV4aW50cm89JmV4cGxhaW50ZXh0PSZ0aXRsZXM9JyArIHNlbGYuY3VycmVudEF1dGhvcigpICsgJyZjYWxsYmFjaz13aWtpQ2FsbGJhY2snO1xuXG5cdCAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRRdW90ZSgnQ291bGQgbm90IGxvYWQgV2lraXBlZGlhIGFydGljbGUnKTtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRBdXRob3IoJ2Vycm9yJyk7XG5cdFx0fSwgMzAwMCk7XG5cblx0ICAgICAkLmFqYXgoIHtcblx0ICAgICAgICB1cmw6IHdpa2lVcmwsXG5cdCAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG5cdCAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICAgIFx0dmFyIHBhZ2VzTm8gPSBPYmplY3Qua2V5cyhkYXRhLnF1ZXJ5LnBhZ2VzKVswXTtcblx0ICAgICAgICBcdHZhciBhcnRpY2xlID0gZGF0YS5xdWVyeS5wYWdlc1twYWdlc05vXS5leHRyYWN0O1xuXHQgICAgICAgIFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcxLjJlbScgfSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRRdW90ZShhcnRpY2xlKTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudEF1dGhvcignV2lraXBlZGlhJyk7XG5cblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlcXVlc3RUaW1lb3V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
