function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){$("#quote").html(""),$("#author").html(""),e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,a=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*a),r=model.data.quotes[t][n];$("#quote").css({"font-size":"2.4em"}),e.currentQuote(r),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){$("#quote").html(""),$("#author").html("");var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var a=Object.keys(t.query.pages)[0],n=t.query.pages[a].extract;$("#quote").css({"font-size":"1.2em"}),e.currentQuote(n),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){$("#quote").hide().fadeIn()},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn(1e3)}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCIkIiwiaHRtbCIsImF1dGhvcnNNYXgiLCJPYmplY3QiLCJrZXlzIiwibW9kZWwiLCJkYXRhIiwiYXV0aG9ycyIsImxlbmd0aCIsImFSYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhdXRob3IiLCJuYW1lIiwicXVvdGVzTWF4IiwicXVvdGVzIiwicVJhbmRvbSIsInF1b3RlIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3aWtpQXV0aG9yIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiY29weUNvbmZpcm0iLCJoaWRlIiwiZmFkZUluIiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJ0ZXh0Iiwidm0iLCJhcHBseUJpbmRpbmdzIiwiZmFpbCIsImpxeGhyIiwidGV4dFN0YXR1cyIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInRlbXAiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFBQSxXQUFBQyxHQUVBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFFLGFBQUFDLEdBQUFDLFdBQUEsSUFDQUosRUFBQUssY0FBQUYsR0FBQUMsV0FBQSxJQUVBSixFQUFBTSxVQUFBLFdBRUFDLEVBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsSUFFQVIsRUFBQVMsYUFBQVQsRUFBQVMsV0FBQUMsT0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsU0FBQUMsT0FDQSxJQUFBQyxHQUFBQyxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBbkIsRUFBQVMsWUFDQVcsRUFBQVIsTUFBQUMsS0FBQUMsUUFBQUUsR0FBQUssS0FFQUMsRUFBQVosT0FBQUMsS0FBQUMsTUFBQUMsS0FBQVUsT0FBQVAsSUFBQUQsT0FDQVMsRUFBQVAsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUcsR0FDQUcsRUFBQWIsTUFBQUMsS0FBQVUsT0FBQVAsR0FBQVEsRUFFQWpCLEdBQUEsVUFBQW1CLEtBQUFDLFlBQUEsVUFDQTNCLEVBQUFFLGFBQUF1QixHQUNBekIsRUFBQUssY0FBQWUsSUFHQXBCLEVBQUE0QixXQUFBLFdBQ0FDLE9BQUFDLEtBQUEsOEVBQ0FDLG1CQUFBLElBQUEvQixFQUFBRSxlQUFBLEtBQUFGLEVBQUFLLG1CQUdBTCxFQUFBZ0MsV0FBQSxXQUVBekIsRUFBQSxVQUFBQyxLQUFBLElBQ0FELEVBQUEsV0FBQUMsS0FBQSxHQUVBLElBQUF5QixHQUFBLDBHQUFBakMsRUFBQUssZ0JBQUEseUJBRUE2QixFQUFBQyxXQUFBLFdBQ0FuQyxFQUFBRSxhQUFBLG9DQUNBRixFQUFBSyxjQUFBLFVBQ0EsSUFFQUUsR0FBQTZCLE1BQ0FDLElBQUFKLEVBQ0FLLFNBQUEsUUFDQUMsUUFBQSxTQUFBMUIsR0FDQSxHQUFBMkIsR0FBQTlCLE9BQUFDLEtBQUFFLEVBQUE0QixNQUFBQyxPQUFBLEdBQ0FDLEVBQUE5QixFQUFBNEIsTUFBQUMsTUFBQUYsR0FBQUksT0FDQXJDLEdBQUEsVUFBQW1CLEtBQUFDLFlBQUEsVUFDQTNCLEVBQUFFLGFBQUF5QyxHQUNBM0MsRUFBQUssY0FBQSxhQUVBd0MsYUFBQVgsT0FLQWxDLEVBQUE4QyxZQUFBLFdBQ0F2QyxFQUFBLFVBQUF3QyxPQUFBQyxVQUlBaEQsRUFBQWlELFVBQUEsR0FBQUMsV0FBQSxjQWpHQSxHQUFBdEMsUUFDQUMsS0FBQSxLQUNBc0MsS0FBQSxXQUNBNUMsRUFBQTZDLFFBQUEsa0JBQ0FDLEtBQUEsU0FBQUMsR0FFQTFDLE1BQUFDLEtBQUF5QyxFQUdBbkQsR0FBQW9ELGdCQUFBQyxVQUNBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQ0FwRCxFQUFBbUQsR0FBQVgsT0FDQTVDLEdBQUFvRCxnQkFBQUssS0FBQUgsT0FBQUMsRUFBQUMsR0FDQXBELEVBQUFtRCxHQUFBVixPQUFBLE1BS0EsSUFBQWEsR0FBQSxHQUFBL0QsVUFDQUssSUFBQTJELGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FFQSxHQUFBbkUsR0FBQWtFLEVBQUEsS0FBQUMsQ0FFQUMsU0FBQUMsSUFBQSxtQkFBQXJFLEdBQ0FRLEVBQUEsVUFBQXFELEtBQUE3RCxHQUNBUSxFQUFBLFdBQUFxRCxLQUFBLDRCQUtBUyxJQXVFQXpELE9BQUF1QyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVUZXh0ID0ge1xuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigxMDAwKTtcblx0XHRcdCAgICB9ICAgICAgICBcblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxudmFyIHRlbXA7XG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gQ2xlYXIgcXVvdGUgYW5kIGF1dGhvclxuXHRcdCQoJyNxdW90ZScpLmh0bWwoJycpO1xuXHRcdCQoJyNhdXRob3InKS5odG1sKCcnKTtcblx0XHQvLyBHZXQgcmFuZG9tIGF1dGhvclxuXHRcdGlmICghc2VsZi5hdXRob3JzTWF4KSBzZWxmLmF1dGhvcnNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLmF1dGhvcnMpLmxlbmd0aDtcblx0XHR2YXIgYVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNlbGYuYXV0aG9yc01heCk7XG5cdFx0dmFyIGF1dGhvciA9IG1vZGVsLmRhdGEuYXV0aG9yc1thUmFuZG9tXS5uYW1lO1xuXHRcdC8vIEdldCByYW5kb20gcXVvdGUgZnJvbSBhdXRob3Jcblx0XHR2YXIgcXVvdGVzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV0pLmxlbmd0aDtcblx0XHR2YXIgcVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc01heCk7XG5cdFx0dmFyIHF1b3RlID0gbW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV1bcVJhbmRvbV07XG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcXVvdGUgJiBhdXRob3Jcblx0XHQkKCcjcXVvdGUnKS5jc3MoeyAnZm9udC1zaXplJzogJzIuNGVtJyB9KTtcblx0XHRzZWxmLmN1cnJlbnRRdW90ZShxdW90ZSk7XG5cdFx0c2VsZi5jdXJyZW50QXV0aG9yKGF1dGhvcik7XG5cdH07XG5cblx0c2VsZi50d2VldFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93Lm9wZW4oJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P2hhc2h0YWdzPXF1b3RlcyZyZWxhdGVkPWZyZWVjb2RlY2FtcCZ0ZXh0PScgK1xuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCdcIicgKyBzZWxmLmN1cnJlbnRRdW90ZSgpICsgJ1wiICcgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSkpO1xuICAgIH07XG5cblx0c2VsZi53aWtpQXV0aG9yID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gQ2xlYXIgcXVvdGUgYW5kIGF1dGhvclxuXHRcdCQoJyNxdW90ZScpLmh0bWwoJycpO1xuXHRcdCQoJyNhdXRob3InKS5odG1sKCcnKTtcblx0XHQvLyBBUEkgUmVxdWVzdCBVUkxcblx0XHR2YXIgd2lraVVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZwcm9wPWV4dHJhY3RzJmV4aW50cm89JmV4cGxhaW50ZXh0PSZ0aXRsZXM9JyArIHNlbGYuY3VycmVudEF1dGhvcigpICsgJyZjYWxsYmFjaz13aWtpQ2FsbGJhY2snO1xuXG5cdCAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRRdW90ZSgnQ291bGQgbm90IGxvYWQgV2lraXBlZGlhIGFydGljbGUnKTtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRBdXRob3IoJ2Vycm9yJyk7XG5cdFx0fSwgMzAwMCk7XG5cblx0ICAgICAkLmFqYXgoIHtcblx0ICAgICAgICB1cmw6IHdpa2lVcmwsXG5cdCAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG5cdCAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICAgIFx0dmFyIHBhZ2VzTm8gPSBPYmplY3Qua2V5cyhkYXRhLnF1ZXJ5LnBhZ2VzKVswXTtcblx0ICAgICAgICBcdHZhciBhcnRpY2xlID0gZGF0YS5xdWVyeS5wYWdlc1twYWdlc05vXS5leHRyYWN0O1xuXHQgICAgICAgIFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcxLjJlbScgfSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRRdW90ZShhcnRpY2xlKTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudEF1dGhvcignV2lraXBlZGlhJyk7XG5cblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlcXVlc3RUaW1lb3V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fTtcblxuXHRzZWxmLmNvcHlDb25maXJtID0gZnVuY3Rpb24oKSB7XG5cdFx0JCgnI3F1b3RlJykuaGlkZSgpLmZhZGVJbigpO1xuXHR9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG59XG5cblxuLy8gLS0gSW5pdGlhbGl6ZSBDb21wb25lbnRzIC0tIC8vXG5cbm1vZGVsLmluaXQoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
