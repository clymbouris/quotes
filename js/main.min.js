function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);for(var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name;o===currentAuthor();)o=model.data.authors[t].name;var a=Object.keys(model.data.quotes[t]).length,r=Math.floor(Math.random()*a),n=model.data.quotes[t][r];$("#quote").html(""),$("#author").html(""),$("#quote").css({"font-size":"2.4em"}),e.currentQuote(n),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var a=Object.keys(t.query.pages)[0],r=t.query.pages[a].extract;$("#quote").html(""),$("#author").html(""),$("#quote").css({"font-size":"1.2em"}),e.currentQuote(r),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){console.log("Copied to clipboard!")},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn()}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsIiQiLCJodG1sIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3aWtpQXV0aG9yIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiY29weUNvbmZpcm0iLCJjb25zb2xlIiwibG9nIiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwidGV4dCIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBcUNBLFFBQUFBLFdBQUFDLEdBRUEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsYUFBQUMsR0FBQUMsV0FBQSxJQUNBSixFQUFBSyxjQUFBRixHQUFBQyxXQUFBLElBRUFKLEVBQUFNLFVBQUEsV0FHQU4sRUFBQU8sYUFBQVAsRUFBQU8sV0FBQUMsT0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsU0FBQUMsT0FJQSxLQUhBLEdBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBRCxJQUFBYixpQkFDQWEsRUFBQVIsTUFBQUMsS0FBQUMsUUFBQUUsR0FBQUssSUFHQSxJQUFBQyxHQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBRSxHQUFBLFVBQUFDLEtBQUEsSUFDQUQsRUFBQSxXQUFBQyxLQUFBLElBQ0FELEVBQUEsVUFBQUUsS0FBQUMsWUFBQSxVQUNBM0IsRUFBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQTRCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQS9CLEVBQUFFLGVBQUEsS0FBQUYsRUFBQUssbUJBR0FMLEVBQUFnQyxXQUFBLFdBR0EsR0FBQUMsR0FBQSwwR0FBQWpDLEVBQUFLLGdCQUFBLHlCQUVBNkIsRUFBQUMsV0FBQSxXQUNBbkMsRUFBQUUsYUFBQSxvQ0FDQUYsRUFBQUssY0FBQSxVQUNBLElBRUFtQixHQUFBWSxNQUNBQyxJQUFBSixFQUNBSyxTQUFBLFFBQ0FDLFFBQUEsU0FBQTVCLEdBQ0EsR0FBQTZCLEdBQUFoQyxPQUFBQyxLQUFBRSxFQUFBOEIsTUFBQUMsT0FBQSxHQUNBQyxFQUFBaEMsRUFBQThCLE1BQUFDLE1BQUFGLEdBQUFJLE9BRUFwQixHQUFBLFVBQUFDLEtBQUEsSUFDQUQsRUFBQSxXQUFBQyxLQUFBLElBQ0FELEVBQUEsVUFBQUUsS0FBQUMsWUFBQSxVQUNBM0IsRUFBQUUsYUFBQXlDLEdBQ0EzQyxFQUFBSyxjQUFBLGFBRUF3QyxhQUFBWCxPQUtBbEMsRUFBQThDLFlBQUEsV0FDQUMsUUFBQUMsSUFBQSx5QkFJQWhELEVBQUFpRCxVQUFBLEdBQUFDLFdBQUEsY0FwR0EsR0FBQXhDLFFBQ0FDLEtBQUEsS0FDQXdDLEtBQUEsV0FDQTNCLEVBQUE0QixRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUE1QyxNQUFBQyxLQUFBMkMsRUFHQW5ELEdBQUFvRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBbkMsRUFBQWtDLEdBQUFFLE9BQ0F6RCxHQUFBb0QsZ0JBQUFNLEtBQUFKLE9BQUFDLEVBQUFDLEdBQ0FuQyxFQUFBa0MsR0FBQUksVUFLQSxJQUFBQyxHQUFBLEdBQUFqRSxVQUNBSyxJQUFBNkQsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFyRSxHQUFBb0UsRUFBQSxLQUFBQyxDQUVBckIsU0FBQUMsSUFBQSxtQkFBQWpELEdBQ0F5QixFQUFBLFVBQUFxQyxLQUFBOUQsR0FDQXlCLEVBQUEsV0FBQXFDLEtBQUEsMkJBK0VBbkQsT0FBQXlDIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFxuLy8gLS0gTU9ERUwgLS0gLy9cblxudmFyIG1vZGVsID0ge1xuXHRkYXRhOiBudWxsLFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHQkLmdldEpTT04oJ2pzL3F1b3Rlcy5qc29uJylcblx0XHQuZG9uZShmdW5jdGlvbigganNvbiApIHtcblxuXHRcdFx0bW9kZWwuZGF0YSA9IGpzb247XG5cblx0XHRcdC8vIEZhZGUgaW4vb3V0IGN1c3RvbSBiaW5kaW5nXG5cdFx0XHRrby5iaW5kaW5nSGFuZGxlcnMuZmFkZVRleHQgPSB7XG5cdFx0XHQgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgXHQkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigpO1xuXHRcdFx0ICAgIH0gICAgICAgIFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cdFx0fSlcblx0XHQuZmFpbChmdW5jdGlvbigganF4aHIsIHRleHRTdGF0dXMsIGVycm9yICkge1xuXG5cdFx0XHR2YXIgZXJyID0gdGV4dFN0YXR1cyArIFwiLCBcIiArIGVycm9yO1xuXHRcdFx0Ly8gU2hvdyBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZyggXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIgKTtcblx0XHRcdCQoJyNxdW90ZScpLnRleHQoZXJyKTtcblx0XHRcdCQoJyNhdXRob3InKS50ZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gTWFrZSBzdXJlIGF1dGhvciBpcyBkaWZmZXJlbnQgZXZlcnkgdGltZVxuXHRcdHdoaWxlIChhdXRob3IgPT09IGN1cnJlbnRBdXRob3IoKSkge1xuXHRcdFx0YXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0fVxuXHRcdC8vIEdldCByYW5kb20gcXVvdGUgZnJvbSBhdXRob3Jcblx0XHR2YXIgcXVvdGVzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV0pLmxlbmd0aDtcblx0XHR2YXIgcVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc01heCk7XG5cdFx0dmFyIHF1b3RlID0gbW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV1bcVJhbmRvbV07XG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcXVvdGUgJiBhdXRob3Jcblx0XHQkKCcjcXVvdGUnKS5odG1sKCcnKTtcblx0XHQkKCcjYXV0aG9yJykuaHRtbCgnJyk7XG5cdFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcyLjRlbScgfSk7XG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xuXG5cdHNlbGYud2lraUF1dGhvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdC8vIEFQSSBSZXF1ZXN0IFVSTFxuXHRcdHZhciB3aWtpVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/Zm9ybWF0PWpzb24mYWN0aW9uPXF1ZXJ5JnByb3A9ZXh0cmFjdHMmZXhpbnRybz0mZXhwbGFpbnRleHQ9JnRpdGxlcz0nICsgc2VsZi5jdXJyZW50QXV0aG9yKCkgKyAnJmNhbGxiYWNrPXdpa2lDYWxsYmFjayc7XG5cblx0ICAgIHZhciByZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGYuY3VycmVudFF1b3RlKCdDb3VsZCBub3QgbG9hZCBXaWtpcGVkaWEgYXJ0aWNsZScpO1xuXHQgICAgICAgIHNlbGYuY3VycmVudEF1dGhvcignZXJyb3InKTtcblx0XHR9LCAzMDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogd2lraVVybCxcblx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgICAgXHR2YXIgcGFnZXNObyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpWzBdO1xuXHQgICAgICAgIFx0dmFyIGFydGljbGUgPSBkYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VzTm9dLmV4dHJhY3Q7XG5cdCAgICAgICAgXHQvLyBDbGVhciBxdW90ZSBhbmQgYXV0aG9yXG5cdFx0XHRcdCQoJyNxdW90ZScpLmh0bWwoJycpO1xuXHRcdFx0XHQkKCcjYXV0aG9yJykuaHRtbCgnJyk7XG5cdCAgICAgICAgXHQkKCcjcXVvdGUnKS5jc3MoeyAnZm9udC1zaXplJzogJzEuMmVtJyB9KTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudFF1b3RlKGFydGljbGUpO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50QXV0aG9yKCdXaWtpcGVkaWEnKTtcblxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVxdWVzdFRpbWVvdXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9O1xuXG5cdHNlbGYuY29weUNvbmZpcm0gPSBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQ29waWVkIHRvIGNsaXBib2FyZCEnKTtcblx0fTtcblxuICAgIC8vIEluaXRpYWxpemUgQ2xpcGJvYXJkXG5cdHNlbGYuY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZCgnI2NsaXBib2FyZCcpO1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
