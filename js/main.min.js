function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,n=Object.keys(model.data.quotes[e]).length,r=Math.floor(Math.random()*n),a=model.data.quotes[e][r];t.currentQuote(a),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t);var o=new Clipboard("#clipboard");o.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),o.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)})}).fail(function(e,t,o){var n=t+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaW5pdCIsIiQiLCJnZXRKU09OIiwiZG9uZSIsImpzb24iLCJiaW5kaW5nSGFuZGxlcnMiLCJmYWRlVGV4dCIsInVwZGF0ZSIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwiaGlkZSIsInRleHQiLCJmYWRlSW4iLCJ2bSIsImFwcGx5QmluZGluZ3MiLCJjbGlwYm9hcmQiLCJDbGlwYm9hcmQiLCJvbiIsImUiLCJjb25zb2xlIiwibG9nIiwiYWN0aW9uIiwidHJpZ2dlciIsImNsZWFyU2VsZWN0aW9uIiwiZXJyb3IiLCJmYWlsIiwianF4aHIiLCJ0ZXh0U3RhdHVzIl0sIm1hcHBpbmdzIjoiQUFvREEsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUdBTixFQUFBTyxhQUFBUCxFQUFBTyxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBdEIsR0FBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQXdCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQTNCLEVBQUFFLGVBQUEsS0FBQUYsRUFBQUssbUJBeEVBLEdBQUFLLFFBQ0FDLEtBQUEsS0FDQWlCLEtBQUEsV0FDQUMsRUFBQUMsUUFBQSxrQkFDQUMsS0FBQSxTQUFBQyxHQUVBdEIsTUFBQUMsS0FBQXFCLEVBR0E3QixHQUFBOEIsZ0JBQUFDLFVBQ0FDLE9BQUEsU0FBQUMsRUFBQUMsR0FDQVIsRUFBQU8sR0FBQUUsT0FDQW5DLEdBQUE4QixnQkFBQU0sS0FBQUosT0FBQUMsRUFBQUMsR0FDQVIsRUFBQU8sR0FBQUksT0FBQSxNQUtBLElBQUFDLEdBQUEsR0FBQTNDLFVBQ0FLLElBQUF1QyxjQUFBRCxFQUdBLElBQUFFLEdBQUEsR0FBQUMsV0FBQSxhQUNBRCxHQUFBRSxHQUFBLFVBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxVQUFBRixFQUFBRyxRQUNBRixRQUFBQyxJQUFBLFFBQUFGLEVBQUFQLE1BQ0FRLFFBQUFDLElBQUEsV0FBQUYsRUFBQUksU0FFQUosRUFBQUssbUJBRUFSLEVBQUFFLEdBQUEsUUFBQSxTQUFBQyxHQUNBQyxRQUFBSyxNQUFBLFVBQUFOLEVBQUFHLFFBQ0FGLFFBQUFLLE1BQUEsV0FBQU4sRUFBQUksYUFHQUcsS0FBQSxTQUFBQyxFQUFBQyxFQUFBSCxHQUVBLEdBQUFyRCxHQUFBd0QsRUFBQSxLQUFBSCxDQUVBTCxTQUFBQyxJQUFBLG1CQUFBakQsR0FDQThCLEVBQUEsVUFBQVUsS0FBQXhDLEdBQ0E4QixFQUFBLFdBQUFVLEtBQUEsMkJBc0NBN0IsT0FBQWtCIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFxuLy8gLS0gTU9ERUwgLS0gLy9cblxudmFyIG1vZGVsID0ge1xuXHRkYXRhOiBudWxsLFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHQkLmdldEpTT04oJ2pzL3F1b3Rlcy5qc29uJylcblx0XHQuZG9uZShmdW5jdGlvbigganNvbiApIHtcblxuXHRcdFx0bW9kZWwuZGF0YSA9IGpzb247XG5cblx0XHRcdC8vIEZhZGUgaW4vb3V0IGN1c3RvbSBiaW5kaW5nXG5cdFx0XHRrby5iaW5kaW5nSGFuZGxlcnMuZmFkZVRleHQgPSB7XG5cdFx0XHQgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgICAgICQoZWxlbWVudCkuaGlkZSgpO1xuXHRcdFx0ICAgICAgICBrby5iaW5kaW5nSGFuZGxlcnMudGV4dC51cGRhdGUoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcik7XG5cdFx0XHQgICAgICAgICQoZWxlbWVudCkuZmFkZUluKDEwMDApO1xuXHRcdFx0ICAgIH0gICAgICAgIFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cblx0XHRcdC8vIEluaXRpYWxpemUgQ2xpcGJvYXJkXG5cdFx0XHR2YXIgY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZCgnI2NsaXBib2FyZCcpO1xuXHRcdFx0Y2xpcGJvYXJkLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuXHRcdCAgICBcdGNvbnNvbGUubG9nKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHRcdFx0ICAgIGNvbnNvbGUubG9nKCdUZXh0OicsIGUudGV4dCk7XG5cdFx0XHQgICAgY29uc29sZS5sb2coJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblxuXHRcdFx0ICAgIGUuY2xlYXJTZWxlY3Rpb24oKTtcblx0XHRcdH0pO1xuXHRcdFx0Y2xpcGJvYXJkLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdCAgICBjb25zb2xlLmVycm9yKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHRcdFx0ICAgIGNvbnNvbGUuZXJyb3IoJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblx0XHRcdH0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
