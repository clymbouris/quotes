function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){$("#quote").html(""),$("#author").html(""),e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,a=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*a),r=model.data.quotes[t][n];$("#quote").css({"font-size":"2.4em"}),e.currentQuote(r),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){$("#quote").html(""),$("#author").html("");var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var a=Object.keys(t.query.pages)[0],n=t.query.pages[a].extract;$("#quote").css({"font-size":"1.2em"}),e.currentQuote(n),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){$("#quote").hide().show()},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn(1e3)}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCIkIiwiaHRtbCIsImF1dGhvcnNNYXgiLCJPYmplY3QiLCJrZXlzIiwibW9kZWwiLCJkYXRhIiwiYXV0aG9ycyIsImxlbmd0aCIsImFSYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhdXRob3IiLCJuYW1lIiwicXVvdGVzTWF4IiwicXVvdGVzIiwicVJhbmRvbSIsInF1b3RlIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3aWtpQXV0aG9yIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiY29weUNvbmZpcm0iLCJoaWRlIiwic2hvdyIsImNsaXBib2FyZCIsIkNsaXBib2FyZCIsImluaXQiLCJnZXRKU09OIiwiZG9uZSIsImpzb24iLCJiaW5kaW5nSGFuZGxlcnMiLCJmYWRlVGV4dCIsInVwZGF0ZSIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwidGV4dCIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJ0ZW1wIl0sIm1hcHBpbmdzIjoiQUF1Q0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUVBQyxFQUFBLFVBQUFDLEtBQUEsSUFDQUQsRUFBQSxXQUFBQyxLQUFBLElBRUFSLEVBQUFTLGFBQUFULEVBQUFTLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQW5CLEVBQUFTLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUFqQixHQUFBLFVBQUFtQixLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBdUIsR0FDQXpCLEVBQUFLLGNBQUFlLElBR0FwQixFQUFBNEIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBL0IsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFHQUwsRUFBQWdDLFdBQUEsV0FFQXpCLEVBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsR0FFQSxJQUFBeUIsR0FBQSwwR0FBQWpDLEVBQUFLLGdCQUFBLHlCQUVBNkIsRUFBQUMsV0FBQSxXQUNBbkMsRUFBQUUsYUFBQSxvQ0FDQUYsRUFBQUssY0FBQSxVQUNBLElBRUFFLEdBQUE2QixNQUNBQyxJQUFBSixFQUNBSyxTQUFBLFFBQ0FDLFFBQUEsU0FBQTFCLEdBQ0EsR0FBQTJCLEdBQUE5QixPQUFBQyxLQUFBRSxFQUFBNEIsTUFBQUMsT0FBQSxHQUNBQyxFQUFBOUIsRUFBQTRCLE1BQUFDLE1BQUFGLEdBQUFJLE9BQ0FyQyxHQUFBLFVBQUFtQixLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBeUMsR0FDQTNDLEVBQUFLLGNBQUEsYUFFQXdDLGFBQUFYLE9BS0FsQyxFQUFBOEMsWUFBQSxXQUNBdkMsRUFBQSxVQUFBd0MsT0FBQUMsUUFJQWhELEVBQUFpRCxVQUFBLEdBQUFDLFdBQUEsY0FqR0EsR0FBQXRDLFFBQ0FDLEtBQUEsS0FDQXNDLEtBQUEsV0FDQTVDLEVBQUE2QyxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUExQyxNQUFBQyxLQUFBeUMsRUFHQW5ELEdBQUFvRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBcEQsRUFBQW1ELEdBQUFYLE9BQ0E1QyxHQUFBb0QsZ0JBQUFLLEtBQUFILE9BQUFDLEVBQUFDLEdBQ0FwRCxFQUFBbUQsR0FBQUcsT0FBQSxNQUtBLElBQUFDLEdBQUEsR0FBQWhFLFVBQ0FLLElBQUE0RCxjQUFBRCxLQUVBRSxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBRUEsR0FBQXBFLEdBQUFtRSxFQUFBLEtBQUFDLENBRUFDLFNBQUFDLElBQUEsbUJBQUF0RSxHQUNBUSxFQUFBLFVBQUFxRCxLQUFBN0QsR0FDQVEsRUFBQSxXQUFBcUQsS0FBQSw0QkFLQVUsSUF1RUExRCxPQUFBdUMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVGV4dCA9IHtcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG5cdFx0XHQgICAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy50ZXh0LnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5mYWRlSW4oMTAwMCk7XG5cdFx0XHQgICAgfSAgICAgICAgXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDb250cnVjdCBWaWV3TW9kZWwgYWZ0ZXIgbW9kZWwgaXMgbG9hZGVkXG5cdFx0XHR2YXIgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cdFx0XHRrby5hcHBseUJpbmRpbmdzKHZtKTtcblx0XHR9KVxuXHRcdC5mYWlsKGZ1bmN0aW9uKCBqcXhociwgdGV4dFN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdHZhciBlcnIgPSB0ZXh0U3RhdHVzICsgXCIsIFwiICsgZXJyb3I7XG5cdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCBcIlJlcXVlc3QgRmFpbGVkOiBcIiArIGVyciApO1xuXHRcdFx0JCgnI3F1b3RlJykudGV4dChlcnIpO1xuXHRcdFx0JCgnI2F1dGhvcicpLnRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbnZhciB0ZW1wO1xuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIENsZWFyIHF1b3RlIGFuZCBhdXRob3Jcblx0XHQkKCcjcXVvdGUnKS5odG1sKCcnKTtcblx0XHQkKCcjYXV0aG9yJykuaHRtbCgnJyk7XG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcyLjRlbScgfSk7XG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xuXG5cdHNlbGYud2lraUF1dGhvciA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIENsZWFyIHF1b3RlIGFuZCBhdXRob3Jcblx0XHQkKCcjcXVvdGUnKS5odG1sKCcnKTtcblx0XHQkKCcjYXV0aG9yJykuaHRtbCgnJyk7XG5cdFx0Ly8gQVBJIFJlcXVlc3QgVVJMXG5cdFx0dmFyIHdpa2lVcmwgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvYXBpLnBocD9mb3JtYXQ9anNvbiZhY3Rpb249cXVlcnkmcHJvcD1leHRyYWN0cyZleGludHJvPSZleHBsYWludGV4dD0mdGl0bGVzPScgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSArICcmY2FsbGJhY2s9d2lraUNhbGxiYWNrJztcblxuXHQgICAgdmFyIHJlcXVlc3RUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgc2VsZi5jdXJyZW50UXVvdGUoJ0NvdWxkIG5vdCBsb2FkIFdpa2lwZWRpYSBhcnRpY2xlJyk7XG5cdCAgICAgICAgc2VsZi5jdXJyZW50QXV0aG9yKCdlcnJvcicpO1xuXHRcdH0sIDMwMDApO1xuXG5cdCAgICAgJC5hamF4KCB7XG5cdCAgICAgICAgdXJsOiB3aWtpVXJsLFxuXHQgICAgICAgIGRhdGFUeXBlOiAnanNvbnAnLFxuXHQgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgICBcdHZhciBwYWdlc05vID0gT2JqZWN0LmtleXMoZGF0YS5xdWVyeS5wYWdlcylbMF07XG5cdCAgICAgICAgXHR2YXIgYXJ0aWNsZSA9IGRhdGEucXVlcnkucGFnZXNbcGFnZXNOb10uZXh0cmFjdDtcblx0ICAgICAgICBcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMS4yZW0nIH0pO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50UXVvdGUoYXJ0aWNsZSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRBdXRob3IoJ1dpa2lwZWRpYScpO1xuXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXF1ZXN0VGltZW91dCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH07XG5cblx0c2VsZi5jb3B5Q29uZmlybSA9IGZ1bmN0aW9uKCkge1xuXHRcdCQoJyNxdW90ZScpLmhpZGUoKS5zaG93KCk7XG5cdH07XG5cbiAgICAvLyBJbml0aWFsaXplIENsaXBib2FyZFxuXHRzZWxmLmNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJyNjbGlwYm9hcmQnKTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
