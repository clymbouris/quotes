function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,n=Object.keys(model.data.quotes[e]).length,r=Math.floor(Math.random()*n),a=model.data.quotes[e][r];t.currentQuote(a),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))},t.clipboard=new Clipboard("#clipboard"),t.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),t.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),t.wiki=function(){var e="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+t.currentAuthor(),o=setTimeout(function(){$("#wikipedia-header").text("Could not load WikiPedia articles")},8e3);$.ajax({url:e,dataType:"jsonp",success:function(e){console.log(e),clearTimeout(o)}})},t.wiki()}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t)}).fail(function(e,t,o){var n=t+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwib24iLCJlIiwiY29uc29sZSIsImxvZyIsImFjdGlvbiIsInRleHQiLCJ0cmlnZ2VyIiwiY2xlYXJTZWxlY3Rpb24iLCJlcnJvciIsIndpa2kiLCJ3aWtpVXJsIiwicmVxdWVzdFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiJCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJjbGVhclRpbWVvdXQiLCJpbml0IiwiZ2V0SlNPTiIsImRvbmUiLCJqc29uIiwiYmluZGluZ0hhbmRsZXJzIiwiZmFkZVRleHQiLCJ1cGRhdGUiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsImhpZGUiLCJmYWRlSW4iLCJ2bSIsImFwcGx5QmluZGluZ3MiLCJmYWlsIiwianF4aHIiLCJ0ZXh0U3RhdHVzIl0sIm1hcHBpbmdzIjoiQUFzQ0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUdBTixFQUFBTyxhQUFBUCxFQUFBTyxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBdEIsR0FBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQXdCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQTNCLEVBQUFFLGVBQUEsS0FBQUYsRUFBQUssbUJBSUFMLEVBQUE0QixVQUFBLEdBQUFDLFdBQUEsY0FDQTdCLEVBQUE0QixVQUFBRSxHQUFBLFVBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxVQUFBRixFQUFBRyxRQUNBRixRQUFBQyxJQUFBLFFBQUFGLEVBQUFJLE1BQ0FILFFBQUFDLElBQUEsV0FBQUYsRUFBQUssU0FFQUwsRUFBQU0sbUJBRUFyQyxFQUFBNEIsVUFBQUUsR0FBQSxRQUFBLFNBQUFDLEdBQ0FDLFFBQUFNLE1BQUEsVUFBQVAsRUFBQUcsUUFDQUYsUUFBQU0sTUFBQSxXQUFBUCxFQUFBSyxXQUdBcEMsRUFBQXVDLEtBQUEsV0FFQSxHQUFBQyxHQUFBLDBHQUFBeEMsRUFBQUssZ0JBRUFvQyxFQUFBQyxXQUFBLFdBQ0FDLEVBQUEscUJBQUFSLEtBQUEsc0NBQ0EsSUFFQVEsR0FBQUMsTUFDQUMsSUFBQUwsRUFDQU0sU0FBQSxRQUNBQyxRQUFBLFNBQUFwQyxHQUVBcUIsUUFBQUMsSUFBQXRCLEdBRUFxQyxhQUFBUCxPQUlBekMsRUFBQXVDLE9BOUZBLEdBQUE3QixRQUNBQyxLQUFBLEtBQ0FzQyxLQUFBLFdBQ0FOLEVBQUFPLFFBQUEsa0JBQ0FDLEtBQUEsU0FBQUMsR0FFQTFDLE1BQUFDLEtBQUF5QyxFQUdBakQsR0FBQWtELGdCQUFBQyxVQUNBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQ0FkLEVBQUFhLEdBQUFFLE9BQ0F2RCxHQUFBa0QsZ0JBQUFsQixLQUFBb0IsT0FBQUMsRUFBQUMsR0FDQWQsRUFBQWEsR0FBQUcsT0FBQSxNQUtBLElBQUFDLEdBQUEsR0FBQTlELFVBQ0FLLElBQUEwRCxjQUFBRCxLQUVBRSxLQUFBLFNBQUFDLEVBQUFDLEVBQUExQixHQUVBLEdBQUF2QyxHQUFBaUUsRUFBQSxLQUFBMUIsQ0FFQU4sU0FBQUMsSUFBQSxtQkFBQWxDLEdBQ0E0QyxFQUFBLFVBQUFSLEtBQUFwQyxHQUNBNEMsRUFBQSxXQUFBUixLQUFBLDJCQXlFQXpCLE9BQUF1QyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVUZXh0ID0ge1xuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigxMDAwKTtcblx0XHRcdCAgICB9ICAgICAgICBcblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG5cdHNlbGYuY2xpcGJvYXJkLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuICAgIFx0Y29uc29sZS5sb2coJ0FjdGlvbjonLCBlLmFjdGlvbik7XG5cdCAgICBjb25zb2xlLmxvZygnVGV4dDonLCBlLnRleHQpO1xuXHQgICAgY29uc29sZS5sb2coJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblxuXHQgICAgZS5jbGVhclNlbGVjdGlvbigpO1xuXHR9KTtcblx0c2VsZi5jbGlwYm9hcmQub24oJ2Vycm9yJywgZnVuY3Rpb24oZSkge1xuXHQgICAgY29uc29sZS5lcnJvcignQWN0aW9uOicsIGUuYWN0aW9uKTtcblx0ICAgIGNvbnNvbGUuZXJyb3IoJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblx0fSk7XG5cblx0c2VsZi53aWtpID0gZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgd2lraVVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZwcm9wPWV4dHJhY3RzJmV4aW50cm89JmV4cGxhaW50ZXh0PSZ0aXRsZXM9JyArIHNlbGYuY3VycmVudEF1dGhvcigpO1xuXG5cdCAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAkKCcjd2lraXBlZGlhLWhlYWRlcicpLnRleHQoXCJDb3VsZCBub3QgbG9hZCBXaWtpUGVkaWEgYXJ0aWNsZXNcIik7XG5cdFx0fSwgODAwMCk7XG5cblx0ICAgICAkLmFqYXgoIHtcblx0ICAgICAgICB1cmw6IHdpa2lVcmwsXG5cdCAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG5cdCAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXG5cdCAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXF1ZXN0VGltZW91dCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH07XG5cdHNlbGYud2lraSgpO1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
