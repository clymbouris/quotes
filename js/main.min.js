function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);for(var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name;o===e.currentAuthor();)t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,console.log(o);var a=Object.keys(model.data.quotes[t]).length,r=Math.floor(Math.random()*a),n=model.data.quotes[t][r];$("#quote").html(""),$("#author").html(""),$("#quote").css({"font-size":"2.4em"}),e.currentQuote(n),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var a=Object.keys(t.query.pages)[0],r=t.query.pages[a].extract;$("#quote").html(""),$("#author").html(""),$("#quote").css({"font-size":"1.2em"}),e.currentQuote(r),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){console.log("Copied to clipboard!")},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn()}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsImNvbnNvbGUiLCJsb2ciLCJxdW90ZXNNYXgiLCJxdW90ZXMiLCJxUmFuZG9tIiwicXVvdGUiLCIkIiwiaHRtbCIsImNzcyIsImZvbnQtc2l6ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwid2lraUF1dGhvciIsIndpa2lVcmwiLCJyZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwicGFnZXNObyIsInF1ZXJ5IiwicGFnZXMiLCJhcnRpY2xlIiwiZXh0cmFjdCIsImNsZWFyVGltZW91dCIsImNvcHlDb25maXJtIiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwidGV4dCIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBcUNBLFFBQUFBLFdBQUFDLEdBRUEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsYUFBQUMsR0FBQUMsV0FBQSxJQUNBSixFQUFBSyxjQUFBRixHQUFBQyxXQUFBLElBRUFKLEVBQUFNLFVBQUEsV0FHQU4sRUFBQU8sYUFBQVAsRUFBQU8sV0FBQUMsT0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsU0FBQUMsT0FJQSxLQUhBLEdBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBRCxJQUFBbEIsRUFBQUssaUJBQ0FTLEVBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUNBQyxRQUFBQyxJQUFBSCxFQUdBLElBQUFJLEdBQUFkLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFZLE9BQUFULElBQUFELE9BQ0FXLEVBQUFULEtBQUFDLE1BQUFELEtBQUFFLFNBQUFLLEdBQ0FHLEVBQUFmLE1BQUFDLEtBQUFZLE9BQUFULEdBQUFVLEVBRUFFLEdBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsSUFDQUQsRUFBQSxVQUFBRSxLQUFBQyxZQUFBLFVBQ0E3QixFQUFBRSxhQUFBdUIsR0FDQXpCLEVBQUFLLGNBQUFhLElBR0FsQixFQUFBOEIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBakMsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFHQUwsRUFBQWtDLFdBQUEsV0FHQSxHQUFBQyxHQUFBLDBHQUFBbkMsRUFBQUssZ0JBQUEseUJBRUErQixFQUFBQyxXQUFBLFdBQ0FyQyxFQUFBRSxhQUFBLG9DQUNBRixFQUFBSyxjQUFBLFVBQ0EsSUFFQXFCLEdBQUFZLE1BQ0FDLElBQUFKLEVBQ0FLLFNBQUEsUUFDQUMsUUFBQSxTQUFBOUIsR0FDQSxHQUFBK0IsR0FBQWxDLE9BQUFDLEtBQUFFLEVBQUFnQyxNQUFBQyxPQUFBLEdBQ0FDLEVBQUFsQyxFQUFBZ0MsTUFBQUMsTUFBQUYsR0FBQUksT0FFQXBCLEdBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsSUFDQUQsRUFBQSxVQUFBRSxLQUFBQyxZQUFBLFVBQ0E3QixFQUFBRSxhQUFBMkMsR0FDQTdDLEVBQUFLLGNBQUEsYUFFQTBDLGFBQUFYLE9BS0FwQyxFQUFBZ0QsWUFBQSxXQUNBNUIsUUFBQUMsSUFBQSx5QkFJQXJCLEVBQUFpRCxVQUFBLEdBQUFDLFdBQUEsY0F0R0EsR0FBQXhDLFFBQ0FDLEtBQUEsS0FDQXdDLEtBQUEsV0FDQXpCLEVBQUEwQixRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUE1QyxNQUFBQyxLQUFBMkMsRUFHQW5ELEdBQUFvRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBakMsRUFBQWdDLEdBQUFFLE9BQ0F6RCxHQUFBb0QsZ0JBQUFNLEtBQUFKLE9BQUFDLEVBQUFDLEdBQ0FqQyxFQUFBZ0MsR0FBQUksVUFLQSxJQUFBQyxHQUFBLEdBQUFqRSxVQUNBSyxJQUFBNkQsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFyRSxHQUFBb0UsRUFBQSxLQUFBQyxDQUVBaEQsU0FBQUMsSUFBQSxtQkFBQXRCLEdBQ0EyQixFQUFBLFVBQUFtQyxLQUFBOUQsR0FDQTJCLEVBQUEsV0FBQW1DLEtBQUEsMkJBaUZBbkQsT0FBQXlDIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFxuLy8gLS0gTU9ERUwgLS0gLy9cblxudmFyIG1vZGVsID0ge1xuXHRkYXRhOiBudWxsLFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHQkLmdldEpTT04oJ2pzL3F1b3Rlcy5qc29uJylcblx0XHQuZG9uZShmdW5jdGlvbigganNvbiApIHtcblxuXHRcdFx0bW9kZWwuZGF0YSA9IGpzb247XG5cblx0XHRcdC8vIEZhZGUgaW4vb3V0IGN1c3RvbSBiaW5kaW5nXG5cdFx0XHRrby5iaW5kaW5nSGFuZGxlcnMuZmFkZVRleHQgPSB7XG5cdFx0XHQgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgXHQkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigpO1xuXHRcdFx0ICAgIH0gICAgICAgIFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cdFx0fSlcblx0XHQuZmFpbChmdW5jdGlvbigganF4aHIsIHRleHRTdGF0dXMsIGVycm9yICkge1xuXG5cdFx0XHR2YXIgZXJyID0gdGV4dFN0YXR1cyArIFwiLCBcIiArIGVycm9yO1xuXHRcdFx0Ly8gU2hvdyBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZyggXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIgKTtcblx0XHRcdCQoJyNxdW90ZScpLnRleHQoZXJyKTtcblx0XHRcdCQoJyNhdXRob3InKS50ZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gTWFrZSBzdXJlIGF1dGhvciBpcyBkaWZmZXJlbnQgZXZlcnkgdGltZVxuXHRcdHdoaWxlIChhdXRob3IgPT09IHNlbGYuY3VycmVudEF1dGhvcigpKSB7XG5cdFx0XHRhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHRcdGF1dGhvciA9IG1vZGVsLmRhdGEuYXV0aG9yc1thUmFuZG9tXS5uYW1lO1xuXHRcdFx0Y29uc29sZS5sb2coYXV0aG9yKTtcblx0XHR9XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZSAmIGF1dGhvclxuXHRcdCQoJyNxdW90ZScpLmh0bWwoJycpO1xuXHRcdCQoJyNhdXRob3InKS5odG1sKCcnKTtcblx0XHQkKCcjcXVvdGUnKS5jc3MoeyAnZm9udC1zaXplJzogJzIuNGVtJyB9KTtcblx0XHRzZWxmLmN1cnJlbnRRdW90ZShxdW90ZSk7XG5cdFx0c2VsZi5jdXJyZW50QXV0aG9yKGF1dGhvcik7XG5cdH07XG5cblx0c2VsZi50d2VldFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93Lm9wZW4oJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P2hhc2h0YWdzPXF1b3RlcyZyZWxhdGVkPWZyZWVjb2RlY2FtcCZ0ZXh0PScgK1xuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCdcIicgKyBzZWxmLmN1cnJlbnRRdW90ZSgpICsgJ1wiICcgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSkpO1xuICAgIH07XG5cblx0c2VsZi53aWtpQXV0aG9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0Ly8gQVBJIFJlcXVlc3QgVVJMXG5cdFx0dmFyIHdpa2lVcmwgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvYXBpLnBocD9mb3JtYXQ9anNvbiZhY3Rpb249cXVlcnkmcHJvcD1leHRyYWN0cyZleGludHJvPSZleHBsYWludGV4dD0mdGl0bGVzPScgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSArICcmY2FsbGJhY2s9d2lraUNhbGxiYWNrJztcblxuXHQgICAgdmFyIHJlcXVlc3RUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgc2VsZi5jdXJyZW50UXVvdGUoJ0NvdWxkIG5vdCBsb2FkIFdpa2lwZWRpYSBhcnRpY2xlJyk7XG5cdCAgICAgICAgc2VsZi5jdXJyZW50QXV0aG9yKCdlcnJvcicpO1xuXHRcdH0sIDMwMDApO1xuXG5cdCAgICAgJC5hamF4KCB7XG5cdCAgICAgICAgdXJsOiB3aWtpVXJsLFxuXHQgICAgICAgIGRhdGFUeXBlOiAnanNvbnAnLFxuXHQgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgICBcdHZhciBwYWdlc05vID0gT2JqZWN0LmtleXMoZGF0YS5xdWVyeS5wYWdlcylbMF07XG5cdCAgICAgICAgXHR2YXIgYXJ0aWNsZSA9IGRhdGEucXVlcnkucGFnZXNbcGFnZXNOb10uZXh0cmFjdDtcblx0ICAgICAgICBcdC8vIENsZWFyIHF1b3RlIGFuZCBhdXRob3Jcblx0XHRcdFx0JCgnI3F1b3RlJykuaHRtbCgnJyk7XG5cdFx0XHRcdCQoJyNhdXRob3InKS5odG1sKCcnKTtcblx0ICAgICAgICBcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMS4yZW0nIH0pO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50UXVvdGUoYXJ0aWNsZSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRBdXRob3IoJ1dpa2lwZWRpYScpO1xuXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXF1ZXN0VGltZW91dCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH07XG5cblx0c2VsZi5jb3B5Q29uZmlybSA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdDb3BpZWQgdG8gY2xpcGJvYXJkIScpO1xuXHR9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG59XG5cblxuLy8gLS0gSW5pdGlhbGl6ZSBDb21wb25lbnRzIC0tIC8vXG5cbm1vZGVsLmluaXQoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
