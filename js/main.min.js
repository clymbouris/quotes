function ViewModel(t){var e=this;e.animations=!0,e.currentQuote=ko.observable(),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,n=Object.keys(model.data.quotes[t]).length,a=Math.floor(Math.random()*n),u=model.data.quotes[t][a];e.currentQuote({author:o,quote:u})},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote().quote+'" '+e.currentQuote().author))}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeVisible={init:function(t,e){e();$("quote").fadeIn()},update:function(t,e){e();$("quote").fadeOut().fadeIn()}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var n=e+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImFuaW1hdGlvbnMiLCJjdXJyZW50UXVvdGUiLCJrbyIsIm9ic2VydmFibGUiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaW5pdCIsIiQiLCJnZXRKU09OIiwiZG9uZSIsImpzb24iLCJiaW5kaW5nSGFuZGxlcnMiLCJmYWRlVmlzaWJsZSIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwiZmFkZUluIiwidXBkYXRlIiwiZmFkZU91dCIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiQUF5Q0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxZQUFBLEVBQ0FGLEVBQUFHLGFBQUFDLEdBQUFDLGFBRUFMLEVBQUFNLFVBQUEsV0FHQU4sRUFBQU8sYUFBQVAsRUFBQU8sV0FBQUMsT0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsU0FBQUMsT0FDQSxJQUFBQyxHQUFBQyxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBakIsRUFBQU8sWUFDQVcsRUFBQVIsTUFBQUMsS0FBQUMsUUFBQUUsR0FBQUssS0FFQUMsRUFBQVosT0FBQUMsS0FBQUMsTUFBQUMsS0FBQVUsT0FBQVAsSUFBQUQsT0FDQVMsRUFBQVAsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUcsR0FDQUcsRUFBQWIsTUFBQUMsS0FBQVUsT0FBQVAsR0FBQVEsRUFFQXRCLEdBQUFHLGNBQUFlLE9BQUFBLEVBQUFLLE1BQUFBLEtBR0F2QixFQUFBd0IsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBM0IsRUFBQUcsZUFBQW9CLE1BQUEsS0FBQXZCLEVBQUFHLGVBQUFlLFVBNURBLEdBQUFSLFFBQ0FDLEtBQUEsS0FDQWlCLEtBQUEsV0FDQUMsRUFBQUMsUUFBQSxrQkFDQUMsS0FBQSxTQUFBQyxHQUVBdEIsTUFBQUMsS0FBQXFCLEVBRUE1QixHQUFBNkIsZ0JBQUFDLGFBQ0FOLEtBQUEsU0FBQU8sRUFBQUMsR0FFQUEsR0FDQVAsR0FBQSxTQUFBUSxVQUVBQyxPQUFBLFNBQUFILEVBQUFDLEdBRUFBLEdBQ0FQLEdBQUEsU0FBQVUsVUFBQUYsVUFJQSxJQUFBRyxHQUFBLEdBQUExQyxVQUNBTSxJQUFBcUMsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUE5QyxHQUFBNkMsRUFBQSxLQUFBQyxDQUVBQyxTQUFBQyxJQUFBLG1CQUFBaEQsR0FDQThCLEVBQUEsVUFBQW1CLEtBQUFqRCxHQUNBOEIsRUFBQSxXQUFBbUIsS0FBQSwyQkFxQ0F0QyxPQUFBa0IiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVmlzaWJsZSA9IHtcblx0XHRcdCAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgICAgIC8vIEluaXRpYWxseSBzZXQgdGhlIGVsZW1lbnQgdG8gYmUgaW5zdGFudGx5IHZpc2libGUvaGlkZGVuIGRlcGVuZGluZyBvbiB0aGUgdmFsdWVcblx0XHRcdCAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuXHRcdFx0ICAgICAgICAkKCdxdW90ZScpLmZhZGVJbigpOyAvLyBVc2UgXCJ1bndyYXBPYnNlcnZhYmxlXCIgc28gd2UgY2FuIGhhbmRsZSB2YWx1ZXMgdGhhdCBtYXkgb3IgbWF5IG5vdCBiZSBvYnNlcnZhYmxlXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgLy8gV2hlbmV2ZXIgdGhlIHZhbHVlIHN1YnNlcXVlbnRseSBjaGFuZ2VzLCBzbG93bHkgZmFkZSB0aGUgZWxlbWVudCBpbiBvciBvdXRcblx0XHRcdCAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuXHRcdFx0ICAgICAgICAkKCdxdW90ZScpLmZhZGVPdXQoKS5mYWRlSW4oKTtcblx0XHRcdCAgICB9XG5cdFx0XHR9O1xuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cdFx0fSlcblx0XHQuZmFpbChmdW5jdGlvbigganF4aHIsIHRleHRTdGF0dXMsIGVycm9yICkge1xuXG5cdFx0XHR2YXIgZXJyID0gdGV4dFN0YXR1cyArIFwiLCBcIiArIGVycm9yO1xuXHRcdFx0Ly8gU2hvdyBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZyggXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIgKTtcblx0XHRcdCQoJyNxdW90ZScpLnRleHQoZXJyKTtcblx0XHRcdCQoJyNhdXRob3InKS50ZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmFuaW1hdGlvbnMgPSB0cnVlO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBHZXQgcmFuZG9tIGF1dGhvclxuXHRcdGlmICghc2VsZi5hdXRob3JzTWF4KSBzZWxmLmF1dGhvcnNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLmF1dGhvcnMpLmxlbmd0aDtcblx0XHR2YXIgYVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNlbGYuYXV0aG9yc01heCk7XG5cdFx0dmFyIGF1dGhvciA9IG1vZGVsLmRhdGEuYXV0aG9yc1thUmFuZG9tXS5uYW1lO1xuXHRcdC8vIEdldCByYW5kb20gcXVvdGUgZnJvbSBhdXRob3Jcblx0XHR2YXIgcXVvdGVzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV0pLmxlbmd0aDtcblx0XHR2YXIgcVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc01heCk7XG5cdFx0dmFyIHF1b3RlID0gbW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV1bcVJhbmRvbV07XG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcXVvdGVcblx0XHRzZWxmLmN1cnJlbnRRdW90ZSh7IFwiYXV0aG9yXCI6IGF1dGhvciwgXCJxdW90ZVwiOiBxdW90ZSB9KTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkucXVvdGUgKyAnXCIgJyArIHNlbGYuY3VycmVudFF1b3RlKCkuYXV0aG9yKSk7XG4gICAgfTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
