function ViewModel(e){var o=this;o.currentQuote=ko.observable(""),o.currentAuthor=ko.observable(""),o.nextQuote=function(){o.authorsMax||(o.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*o.authorsMax),t=model.data.authors[e].name,n=Object.keys(model.data.quotes[e]).length,r=Math.floor(Math.random()*n),a=model.data.quotes[e][r];o.currentQuote(a),o.currentAuthor(t)},o.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+o.currentQuote()+'" '+o.currentAuthor()))},o.clipboard=new Clipboard("#clipboard"),o.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),o.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)})}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,o){$(e).hide(),ko.bindingHandlers.text.update(e,o),$(e).fadeIn(1e3)}};var o=new ViewModel;ko.applyBindings(o)}).fail(function(e,o,t){var n=o+", "+t;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwib24iLCJlIiwiY29uc29sZSIsImxvZyIsImFjdGlvbiIsInRleHQiLCJ0cmlnZ2VyIiwiY2xlYXJTZWxlY3Rpb24iLCJlcnJvciIsImluaXQiLCIkIiwiZ2V0SlNPTiIsImRvbmUiLCJqc29uIiwiYmluZGluZ0hhbmRsZXJzIiwiZmFkZVRleHQiLCJ1cGRhdGUiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsImhpZGUiLCJmYWRlSW4iLCJ2bSIsImFwcGx5QmluZGluZ3MiLCJmYWlsIiwianF4aHIiLCJ0ZXh0U3RhdHVzIl0sIm1hcHBpbmdzIjoiQUFzQ0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUdBTixFQUFBTyxhQUFBUCxFQUFBTyxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBdEIsR0FBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQXdCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQTNCLEVBQUFFLGVBQUEsS0FBQUYsRUFBQUssbUJBSUFMLEVBQUE0QixVQUFBLEdBQUFDLFdBQUEsY0FDQTdCLEVBQUE0QixVQUFBRSxHQUFBLFVBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxVQUFBRixFQUFBRyxRQUNBRixRQUFBQyxJQUFBLFFBQUFGLEVBQUFJLE1BQ0FILFFBQUFDLElBQUEsV0FBQUYsRUFBQUssU0FFQUwsRUFBQU0sbUJBRUFyQyxFQUFBNEIsVUFBQUUsR0FBQSxRQUFBLFNBQUFDLEdBQ0FDLFFBQUFNLE1BQUEsVUFBQVAsRUFBQUcsUUFDQUYsUUFBQU0sTUFBQSxXQUFBUCxFQUFBSyxXQXhFQSxHQUFBMUIsUUFDQUMsS0FBQSxLQUNBNEIsS0FBQSxXQUNBQyxFQUFBQyxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUFqQyxNQUFBQyxLQUFBZ0MsRUFHQXhDLEdBQUF5QyxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBUixFQUFBTyxHQUFBRSxPQUNBOUMsR0FBQXlDLGdCQUFBVCxLQUFBVyxPQUFBQyxFQUFBQyxHQUNBUixFQUFBTyxHQUFBRyxPQUFBLE1BS0EsSUFBQUMsR0FBQSxHQUFBckQsVUFDQUssSUFBQWlELGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQWpCLEdBRUEsR0FBQXZDLEdBQUF3RCxFQUFBLEtBQUFqQixDQUVBTixTQUFBQyxJQUFBLG1CQUFBbEMsR0FDQXlDLEVBQUEsVUFBQUwsS0FBQXBDLEdBQ0F5QyxFQUFBLFdBQUFMLEtBQUEsMkJBb0RBekIsT0FBQTZCIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFxuLy8gLS0gTU9ERUwgLS0gLy9cblxudmFyIG1vZGVsID0ge1xuXHRkYXRhOiBudWxsLFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHQkLmdldEpTT04oJ2pzL3F1b3Rlcy5qc29uJylcblx0XHQuZG9uZShmdW5jdGlvbigganNvbiApIHtcblxuXHRcdFx0bW9kZWwuZGF0YSA9IGpzb247XG5cblx0XHRcdC8vIEZhZGUgaW4vb3V0IGN1c3RvbSBiaW5kaW5nXG5cdFx0XHRrby5iaW5kaW5nSGFuZGxlcnMuZmFkZVRleHQgPSB7XG5cdFx0XHQgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgICAgICQoZWxlbWVudCkuaGlkZSgpO1xuXHRcdFx0ICAgICAgICBrby5iaW5kaW5nSGFuZGxlcnMudGV4dC51cGRhdGUoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcik7XG5cdFx0XHQgICAgICAgICQoZWxlbWVudCkuZmFkZUluKDEwMDApO1xuXHRcdFx0ICAgIH0gICAgICAgIFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cdFx0fSlcblx0XHQuZmFpbChmdW5jdGlvbigganF4aHIsIHRleHRTdGF0dXMsIGVycm9yICkge1xuXG5cdFx0XHR2YXIgZXJyID0gdGV4dFN0YXR1cyArIFwiLCBcIiArIGVycm9yO1xuXHRcdFx0Ly8gU2hvdyBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZyggXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIgKTtcblx0XHRcdCQoJyNxdW90ZScpLnRleHQoZXJyKTtcblx0XHRcdCQoJyNhdXRob3InKS50ZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBHZXQgcmFuZG9tIGF1dGhvclxuXHRcdGlmICghc2VsZi5hdXRob3JzTWF4KSBzZWxmLmF1dGhvcnNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLmF1dGhvcnMpLmxlbmd0aDtcblx0XHR2YXIgYVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNlbGYuYXV0aG9yc01heCk7XG5cdFx0dmFyIGF1dGhvciA9IG1vZGVsLmRhdGEuYXV0aG9yc1thUmFuZG9tXS5uYW1lO1xuXHRcdC8vIEdldCByYW5kb20gcXVvdGUgZnJvbSBhdXRob3Jcblx0XHR2YXIgcXVvdGVzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV0pLmxlbmd0aDtcblx0XHR2YXIgcVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc01heCk7XG5cdFx0dmFyIHF1b3RlID0gbW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV1bcVJhbmRvbV07XG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcXVvdGUgJiBhdXRob3Jcblx0XHRzZWxmLmN1cnJlbnRRdW90ZShxdW90ZSk7XG5cdFx0c2VsZi5jdXJyZW50QXV0aG9yKGF1dGhvcik7XG5cdH07XG5cblx0c2VsZi50d2VldFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93Lm9wZW4oJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P2hhc2h0YWdzPXF1b3RlcyZyZWxhdGVkPWZyZWVjb2RlY2FtcCZ0ZXh0PScgK1xuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCdcIicgKyBzZWxmLmN1cnJlbnRRdW90ZSgpICsgJ1wiICcgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSkpO1xuICAgIH07XG5cbiAgICAvLyBJbml0aWFsaXplIENsaXBib2FyZFxuXHRzZWxmLmNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJyNjbGlwYm9hcmQnKTtcblx0c2VsZi5jbGlwYm9hcmQub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbihlKSB7XG4gICAgXHRjb25zb2xlLmxvZygnQWN0aW9uOicsIGUuYWN0aW9uKTtcblx0ICAgIGNvbnNvbGUubG9nKCdUZXh0OicsIGUudGV4dCk7XG5cdCAgICBjb25zb2xlLmxvZygnVHJpZ2dlcjonLCBlLnRyaWdnZXIpO1xuXG5cdCAgICBlLmNsZWFyU2VsZWN0aW9uKCk7XG5cdH0pO1xuXHRzZWxmLmNsaXBib2FyZC5vbignZXJyb3InLCBmdW5jdGlvbihlKSB7XG5cdCAgICBjb25zb2xlLmVycm9yKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHQgICAgY29uc29sZS5lcnJvcignVHJpZ2dlcjonLCBlLnRyaWdnZXIpO1xuXHR9KTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
