function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,a=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*a),r=model.data.quotes[t][n];$("#quote").html(""),$("#author").html(""),$("#quote").css({"font-size":"2.4em"}),e.currentQuote(r),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var a=Object.keys(t.query.pages)[0],n=t.query.pages[a].extract;$("#quote").html(""),$("#author").html(""),$("#quote").css({"font-size":"1.2em"}),e.currentQuote(n),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){console.log("Copied to clipboard!")},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn(1e3)}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsIiQiLCJodG1sIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3aWtpQXV0aG9yIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiY29weUNvbmZpcm0iLCJjb25zb2xlIiwibG9nIiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwidGV4dCIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciIsInRlbXAiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFBQSxXQUFBQyxHQUVBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFFLGFBQUFDLEdBQUFDLFdBQUEsSUFDQUosRUFBQUssY0FBQUYsR0FBQUMsV0FBQSxJQUVBSixFQUFBTSxVQUFBLFdBR0FOLEVBQUFPLGFBQUFQLEVBQUFPLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQWpCLEVBQUFPLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUFFLEdBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsSUFDQUQsRUFBQSxVQUFBRSxLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBcUIsR0FDQXZCLEVBQUFLLGNBQUFhLElBR0FsQixFQUFBNEIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBL0IsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFHQUwsRUFBQWdDLFdBQUEsV0FHQSxHQUFBQyxHQUFBLDBHQUFBakMsRUFBQUssZ0JBQUEseUJBRUE2QixFQUFBQyxXQUFBLFdBQ0FuQyxFQUFBRSxhQUFBLG9DQUNBRixFQUFBSyxjQUFBLFVBQ0EsSUFFQW1CLEdBQUFZLE1BQ0FDLElBQUFKLEVBQ0FLLFNBQUEsUUFDQUMsUUFBQSxTQUFBNUIsR0FDQSxHQUFBNkIsR0FBQWhDLE9BQUFDLEtBQUFFLEVBQUE4QixNQUFBQyxPQUFBLEdBQ0FDLEVBQUFoQyxFQUFBOEIsTUFBQUMsTUFBQUYsR0FBQUksT0FFQXBCLEdBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsSUFDQUQsRUFBQSxVQUFBRSxLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBeUMsR0FDQTNDLEVBQUFLLGNBQUEsYUFFQXdDLGFBQUFYLE9BS0FsQyxFQUFBOEMsWUFBQSxXQUNBQyxRQUFBQyxJQUFBLHlCQUlBaEQsRUFBQWlELFVBQUEsR0FBQUMsV0FBQSxjQWxHQSxHQUFBeEMsUUFDQUMsS0FBQSxLQUNBd0MsS0FBQSxXQUNBM0IsRUFBQTRCLFFBQUEsa0JBQ0FDLEtBQUEsU0FBQUMsR0FFQTVDLE1BQUFDLEtBQUEyQyxFQUdBbkQsR0FBQW9ELGdCQUFBQyxVQUNBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQ0FuQyxFQUFBa0MsR0FBQUUsT0FDQXpELEdBQUFvRCxnQkFBQU0sS0FBQUosT0FBQUMsRUFBQUMsR0FDQW5DLEVBQUFrQyxHQUFBSSxPQUFBLE1BS0EsSUFBQUMsR0FBQSxHQUFBakUsVUFDQUssSUFBQTZELGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FFQSxHQUFBckUsR0FBQW9FLEVBQUEsS0FBQUMsQ0FFQXJCLFNBQUFDLElBQUEsbUJBQUFqRCxHQUNBeUIsRUFBQSxVQUFBcUMsS0FBQTlELEdBQ0F5QixFQUFBLFdBQUFxQyxLQUFBLDRCQUtBUSxJQXdFQTNELE9BQUF5QyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVUZXh0ID0ge1xuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigxMDAwKTtcblx0XHRcdCAgICB9ICAgICAgICBcblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxudmFyIHRlbXA7XG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0JCgnI3F1b3RlJykuaHRtbCgnJyk7XG5cdFx0JCgnI2F1dGhvcicpLmh0bWwoJycpO1xuXHRcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMi40ZW0nIH0pO1xuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnXCIgJyArIHNlbGYuY3VycmVudEF1dGhvcigpKSk7XG4gICAgfTtcblxuXHRzZWxmLndpa2lBdXRob3IgPSBmdW5jdGlvbigpIHtcblx0XHRcblx0XHQvLyBBUEkgUmVxdWVzdCBVUkxcblx0XHR2YXIgd2lraVVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZwcm9wPWV4dHJhY3RzJmV4aW50cm89JmV4cGxhaW50ZXh0PSZ0aXRsZXM9JyArIHNlbGYuY3VycmVudEF1dGhvcigpICsgJyZjYWxsYmFjaz13aWtpQ2FsbGJhY2snO1xuXG5cdCAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRRdW90ZSgnQ291bGQgbm90IGxvYWQgV2lraXBlZGlhIGFydGljbGUnKTtcblx0ICAgICAgICBzZWxmLmN1cnJlbnRBdXRob3IoJ2Vycm9yJyk7XG5cdFx0fSwgMzAwMCk7XG5cblx0ICAgICAkLmFqYXgoIHtcblx0ICAgICAgICB1cmw6IHdpa2lVcmwsXG5cdCAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG5cdCAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICAgIFx0dmFyIHBhZ2VzTm8gPSBPYmplY3Qua2V5cyhkYXRhLnF1ZXJ5LnBhZ2VzKVswXTtcblx0ICAgICAgICBcdHZhciBhcnRpY2xlID0gZGF0YS5xdWVyeS5wYWdlc1twYWdlc05vXS5leHRyYWN0O1xuXHQgICAgICAgIFx0Ly8gQ2xlYXIgcXVvdGUgYW5kIGF1dGhvclxuXHRcdFx0XHQkKCcjcXVvdGUnKS5odG1sKCcnKTtcblx0XHRcdFx0JCgnI2F1dGhvcicpLmh0bWwoJycpO1xuXHQgICAgICAgIFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcxLjJlbScgfSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRRdW90ZShhcnRpY2xlKTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudEF1dGhvcignV2lraXBlZGlhJyk7XG5cblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlcXVlc3RUaW1lb3V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fTtcblxuXHRzZWxmLmNvcHlDb25maXJtID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ0NvcGllZCB0byBjbGlwYm9hcmQhJyk7XG5cdH07XG5cbiAgICAvLyBJbml0aWFsaXplIENsaXBib2FyZFxuXHRzZWxmLmNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJyNjbGlwYm9hcmQnKTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
