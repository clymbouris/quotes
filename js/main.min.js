function ViewModel(e){var o=this;o.currentQuote=ko.observable(""),o.currentAuthor=ko.observable(""),o.nextQuote=function(){o.authorsMax||(o.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*o.authorsMax),t=model.data.authors[e].name,n=Object.keys(model.data.quotes[e]).length,a=Math.floor(Math.random()*n),r=model.data.quotes[e][a];o.currentQuote(r),o.currentAuthor(t)},o.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+o.currentQuote()+'" '+o.currentAuthor()))},o.clipboard=new Clipboard("#clipboard"),o.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),o.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),o.wiki=function(){var e=setTimeout(function(){$("#wikipedia-header").text("Could not load WikiPedia articles")},8e3);$.ajax({url:fqurl,dataType:"json",success:function(o){console.log(o),clearTimeout(e)}})},o.wiki()}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,o){$(e).hide(),ko.bindingHandlers.text.update(e,o),$(e).fadeIn(1e3)}};var o=new ViewModel;ko.applyBindings(o)}).fail(function(e,o,t){var n=o+", "+t;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwib24iLCJlIiwiY29uc29sZSIsImxvZyIsImFjdGlvbiIsInRleHQiLCJ0cmlnZ2VyIiwiY2xlYXJTZWxlY3Rpb24iLCJlcnJvciIsIndpa2kiLCJyZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCIkIiwiYWpheCIsInVybCIsImZxdXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwiY2xlYXJUaW1lb3V0IiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwiZmFkZUluIiwidm0iLCJhcHBseUJpbmRpbmdzIiwiZmFpbCIsImpxeGhyIiwidGV4dFN0YXR1cyJdLCJtYXBwaW5ncyI6IkFBc0NBLFFBQUFBLFdBQUFDLEdBRUEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsYUFBQUMsR0FBQUMsV0FBQSxJQUNBSixFQUFBSyxjQUFBRixHQUFBQyxXQUFBLElBRUFKLEVBQUFNLFVBQUEsV0FHQU4sRUFBQU8sYUFBQVAsRUFBQU8sV0FBQUMsT0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsU0FBQUMsT0FDQSxJQUFBQyxHQUFBQyxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBakIsRUFBQU8sWUFDQVcsRUFBQVIsTUFBQUMsS0FBQUMsUUFBQUUsR0FBQUssS0FFQUMsRUFBQVosT0FBQUMsS0FBQUMsTUFBQUMsS0FBQVUsT0FBQVAsSUFBQUQsT0FDQVMsRUFBQVAsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUcsR0FDQUcsRUFBQWIsTUFBQUMsS0FBQVUsT0FBQVAsR0FBQVEsRUFFQXRCLEdBQUFFLGFBQUFxQixHQUNBdkIsRUFBQUssY0FBQWEsSUFHQWxCLEVBQUF3QixXQUFBLFdBQ0FDLE9BQUFDLEtBQUEsOEVBQ0FDLG1CQUFBLElBQUEzQixFQUFBRSxlQUFBLEtBQUFGLEVBQUFLLG1CQUlBTCxFQUFBNEIsVUFBQSxHQUFBQyxXQUFBLGNBQ0E3QixFQUFBNEIsVUFBQUUsR0FBQSxVQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUEsVUFBQUYsRUFBQUcsUUFDQUYsUUFBQUMsSUFBQSxRQUFBRixFQUFBSSxNQUNBSCxRQUFBQyxJQUFBLFdBQUFGLEVBQUFLLFNBRUFMLEVBQUFNLG1CQUVBckMsRUFBQTRCLFVBQUFFLEdBQUEsUUFBQSxTQUFBQyxHQUNBQyxRQUFBTSxNQUFBLFVBQUFQLEVBQUFHLFFBQ0FGLFFBQUFNLE1BQUEsV0FBQVAsRUFBQUssV0FHQXBDLEVBQUF1QyxLQUFBLFdBQ0EsR0FFQUMsR0FBQUMsV0FBQSxXQUNBQyxFQUFBLHFCQUFBUCxLQUFBLHNDQUNBLElBRUFPLEdBQUFDLE1BQ0FDLElBQUFDLE1BQ0FDLFNBQUEsT0FDQUMsUUFBQSxTQUFBcEMsR0FFQXFCLFFBQUFDLElBQUF0QixHQUVBcUMsYUFBQVIsT0FJQXhDLEVBQUF1QyxPQTdGQSxHQUFBN0IsUUFDQUMsS0FBQSxLQUNBc0MsS0FBQSxXQUNBUCxFQUFBUSxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUExQyxNQUFBQyxLQUFBeUMsRUFHQWpELEdBQUFrRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBZixFQUFBYyxHQUFBRSxPQUNBdkQsR0FBQWtELGdCQUFBbEIsS0FBQW9CLE9BQUFDLEVBQUFDLEdBQ0FmLEVBQUFjLEdBQUFHLE9BQUEsTUFLQSxJQUFBQyxHQUFBLEdBQUE5RCxVQUNBSyxJQUFBMEQsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBMUIsR0FFQSxHQUFBdkMsR0FBQWlFLEVBQUEsS0FBQTFCLENBRUFOLFNBQUFDLElBQUEsbUJBQUFsQyxHQUNBMkMsRUFBQSxVQUFBUCxLQUFBcEMsR0FDQTJDLEVBQUEsV0FBQVAsS0FBQSwyQkF3RUF6QixPQUFBdUMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVGV4dCA9IHtcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG5cdFx0XHQgICAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy50ZXh0LnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5mYWRlSW4oMTAwMCk7XG5cdFx0XHQgICAgfSAgICAgICAgXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDb250cnVjdCBWaWV3TW9kZWwgYWZ0ZXIgbW9kZWwgaXMgbG9hZGVkXG5cdFx0XHR2YXIgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cdFx0XHRrby5hcHBseUJpbmRpbmdzKHZtKTtcblx0XHR9KVxuXHRcdC5mYWlsKGZ1bmN0aW9uKCBqcXhociwgdGV4dFN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdHZhciBlcnIgPSB0ZXh0U3RhdHVzICsgXCIsIFwiICsgZXJyb3I7XG5cdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCBcIlJlcXVlc3QgRmFpbGVkOiBcIiArIGVyciApO1xuXHRcdFx0JCgnI3F1b3RlJykudGV4dChlcnIpO1xuXHRcdFx0JCgnI2F1dGhvcicpLnRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cblxuLy8gLS0gVklFV01PREVMIC0tIC8vXG5cbmZ1bmN0aW9uIFZpZXdNb2RlbChlcnIpIHtcblxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHNlbGYuY3VycmVudFF1b3RlID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdHNlbGYuY3VycmVudEF1dGhvciA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRcblx0c2VsZi5uZXh0UXVvdGUgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZSAmIGF1dGhvclxuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnXCIgJyArIHNlbGYuY3VycmVudEF1dGhvcigpKSk7XG4gICAgfTtcblxuICAgIC8vIEluaXRpYWxpemUgQ2xpcGJvYXJkXG5cdHNlbGYuY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZCgnI2NsaXBib2FyZCcpO1xuXHRzZWxmLmNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICBcdGNvbnNvbGUubG9nKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHQgICAgY29uc29sZS5sb2coJ1RleHQ6JywgZS50ZXh0KTtcblx0ICAgIGNvbnNvbGUubG9nKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7XG5cblx0ICAgIGUuY2xlYXJTZWxlY3Rpb24oKTtcblx0fSk7XG5cdHNlbGYuY2xpcGJvYXJkLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcblx0ICAgIGNvbnNvbGUuZXJyb3IoJ0FjdGlvbjonLCBlLmFjdGlvbik7XG5cdCAgICBjb25zb2xlLmVycm9yKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7XG5cdH0pO1xuXG5cdHNlbGYud2lraSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB3aWtpVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/YWN0aW9uPW9wZW5zZWFyY2gmc2VhcmNoPWFsYmVydCBlaW5zdGVpbiZmb3JtYXQ9anNvbic7XG5cblx0ICAgIHZhciByZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICQoJyN3aWtpcGVkaWEtaGVhZGVyJykudGV4dChcIkNvdWxkIG5vdCBsb2FkIFdpa2lQZWRpYSBhcnRpY2xlc1wiKTtcblx0XHR9LCA4MDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogZnF1cmwsXG5cdCAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0ICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG5cblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlcXVlc3RUaW1lb3V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fTtcblx0c2VsZi53aWtpKCk7XG59XG5cblxuLy8gLS0gSW5pdGlhbGl6ZSBDb21wb25lbnRzIC0tIC8vXG5cbm1vZGVsLmluaXQoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
