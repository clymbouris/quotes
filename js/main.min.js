function ViewModel(t){var e=this;e.animate=ko.observable(!1),e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,a=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*a),u=model.data.quotes[t][n];e.currentQuote(u),e.currentAuthor(o),e.animate(!0)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+" - "+e.author()))}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeVisible={init:function(t,e){},update:function(t,e){$("#quote").fadeOut().fadeIn()}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImFuaW1hdGUiLCJrbyIsIm9ic2VydmFibGUiLCJjdXJyZW50UXVvdGUiLCJjdXJyZW50QXV0aG9yIiwibmV4dFF1b3RlIiwiYXV0aG9yc01heCIsIk9iamVjdCIsImtleXMiLCJtb2RlbCIsImRhdGEiLCJhdXRob3JzIiwibGVuZ3RoIiwiYVJhbmRvbSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImF1dGhvciIsIm5hbWUiLCJxdW90ZXNNYXgiLCJxdW90ZXMiLCJxUmFuZG9tIiwicXVvdGUiLCJ0d2VldFF1b3RlIiwid2luZG93Iiwib3BlbiIsImVuY29kZVVSSUNvbXBvbmVudCIsImluaXQiLCIkIiwiZ2V0SlNPTiIsImRvbmUiLCJqc29uIiwiYmluZGluZ0hhbmRsZXJzIiwiZmFkZVZpc2libGUiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsInVwZGF0ZSIsImZhZGVPdXQiLCJmYWRlSW4iLCJ2bSIsImFwcGx5QmluZGluZ3MiLCJmYWlsIiwianF4aHIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBeUNBLFFBQUFBLFdBQUFDLEdBRUEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsUUFBQUMsR0FBQUMsWUFBQSxHQUNBSixFQUFBSyxhQUFBRixHQUFBQyxXQUFBLElBQ0FKLEVBQUFNLGNBQUFILEdBQUFDLFdBQUEsSUFFQUosRUFBQU8sVUFBQSxXQUdBUCxFQUFBUSxhQUFBUixFQUFBUSxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFsQixFQUFBUSxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBdkIsR0FBQUssYUFBQW1CLEdBQ0F4QixFQUFBTSxjQUFBYSxHQUNBbkIsRUFBQUUsU0FBQSxJQUdBRixFQUFBeUIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBNUIsRUFBQUssZUFBQSxNQUFBTCxFQUFBbUIsWUEvREEsR0FBQVIsUUFDQUMsS0FBQSxLQUNBaUIsS0FBQSxXQUNBQyxFQUFBQyxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUF0QixNQUFBQyxLQUFBcUIsRUFHQTlCLEdBQUErQixnQkFBQUMsYUFDQU4sS0FBQSxTQUFBTyxFQUFBQyxLQUlBQyxPQUFBLFNBQUFGLEVBQUFDLEdBRUFQLEVBQUEsVUFBQVMsVUFBQUMsVUFLQSxJQUFBQyxHQUFBLEdBQUEzQyxVQUNBSyxJQUFBdUMsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUEvQyxHQUFBOEMsRUFBQSxLQUFBQyxDQUVBQyxTQUFBQyxJQUFBLG1CQUFBakQsR0FDQStCLEVBQUEsVUFBQW1CLEtBQUFsRCxHQUNBK0IsRUFBQSxXQUFBbUIsS0FBQSwyQkF3Q0F0QyxPQUFBa0IiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVWaXNpYmxlID0ge1xuXHRcdFx0ICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgLy8gSW5pdGlhbGx5IHNldCB0aGUgZWxlbWVudCB0byBiZSBpbnN0YW50bHkgdmlzaWJsZS9oaWRkZW4gZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZVxuXG5cdFx0XHQgICAgfSxcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgLy8gV2hlbmV2ZXIgdGhlIHZhbHVlIHN1YnNlcXVlbnRseSBjaGFuZ2VzLCBzbG93bHkgZmFkZSB0aGUgZWxlbWVudCBpbiBvciBvdXRcblx0XHRcdCAgICAgICAgJCgnI3F1b3RlJykuZmFkZU91dCgpLmZhZGVJbigpO1xuXHRcdFx0ICAgIH1cblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5hbmltYXRlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG5cdHNlbGYuY3VycmVudFF1b3RlID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdHNlbGYuY3VycmVudEF1dGhvciA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRcblx0c2VsZi5uZXh0UXVvdGUgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZVxuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0XHRzZWxmLmFuaW1hdGUodHJ1ZSk7XG5cdH07XG5cblx0c2VsZi50d2VldFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93Lm9wZW4oJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P2hhc2h0YWdzPXF1b3RlcyZyZWxhdGVkPWZyZWVjb2RlY2FtcCZ0ZXh0PScgK1xuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCdcIicgKyBzZWxmLmN1cnJlbnRRdW90ZSgpICsgJyAtICcgKyBzZWxmLmF1dGhvcigpKSk7XG4gICAgfTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
