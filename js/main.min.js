function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){$("#quote").html(""),$("#author").html(""),e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,a=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*a),r=model.data.quotes[t][n];$("#quote").css({"font-size":"2.4em"}),e.currentQuote(r),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){$("#quote").html(""),$("#author").html("");var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var a=Object.keys(t.query.pages)[0],n=t.query.pages[a].extract;$("#quote").css({"font-size":"1.2em"}),e.currentQuote(n),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){$("#quote").fadeOut(100).fadeIn(100)},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn(1e3)}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCIkIiwiaHRtbCIsImF1dGhvcnNNYXgiLCJPYmplY3QiLCJrZXlzIiwibW9kZWwiLCJkYXRhIiwiYXV0aG9ycyIsImxlbmd0aCIsImFSYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJhdXRob3IiLCJuYW1lIiwicXVvdGVzTWF4IiwicXVvdGVzIiwicVJhbmRvbSIsInF1b3RlIiwiY3NzIiwiZm9udC1zaXplIiwidHdlZXRRdW90ZSIsIndpbmRvdyIsIm9wZW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ3aWtpQXV0aG9yIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiY29weUNvbmZpcm0iLCJmYWRlT3V0IiwiZmFkZUluIiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwidGV4dCIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJ0ZW1wIl0sIm1hcHBpbmdzIjoiQUF1Q0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUVBQyxFQUFBLFVBQUFDLEtBQUEsSUFDQUQsRUFBQSxXQUFBQyxLQUFBLElBRUFSLEVBQUFTLGFBQUFULEVBQUFTLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQW5CLEVBQUFTLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUFqQixHQUFBLFVBQUFtQixLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBdUIsR0FDQXpCLEVBQUFLLGNBQUFlLElBR0FwQixFQUFBNEIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBL0IsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFHQUwsRUFBQWdDLFdBQUEsV0FFQXpCLEVBQUEsVUFBQUMsS0FBQSxJQUNBRCxFQUFBLFdBQUFDLEtBQUEsR0FFQSxJQUFBeUIsR0FBQSwwR0FBQWpDLEVBQUFLLGdCQUFBLHlCQUVBNkIsRUFBQUMsV0FBQSxXQUNBbkMsRUFBQUUsYUFBQSxvQ0FDQUYsRUFBQUssY0FBQSxVQUNBLElBRUFFLEdBQUE2QixNQUNBQyxJQUFBSixFQUNBSyxTQUFBLFFBQ0FDLFFBQUEsU0FBQTFCLEdBQ0EsR0FBQTJCLEdBQUE5QixPQUFBQyxLQUFBRSxFQUFBNEIsTUFBQUMsT0FBQSxHQUNBQyxFQUFBOUIsRUFBQTRCLE1BQUFDLE1BQUFGLEdBQUFJLE9BQ0FyQyxHQUFBLFVBQUFtQixLQUFBQyxZQUFBLFVBQ0EzQixFQUFBRSxhQUFBeUMsR0FDQTNDLEVBQUFLLGNBQUEsYUFFQXdDLGFBQUFYLE9BS0FsQyxFQUFBOEMsWUFBQSxXQUNBdkMsRUFBQSxVQUFBd0MsUUFBQSxLQUFBQyxPQUFBLE1BSUFoRCxFQUFBaUQsVUFBQSxHQUFBQyxXQUFBLGNBakdBLEdBQUF0QyxRQUNBQyxLQUFBLEtBQ0FzQyxLQUFBLFdBQ0E1QyxFQUFBNkMsUUFBQSxrQkFDQUMsS0FBQSxTQUFBQyxHQUVBMUMsTUFBQUMsS0FBQXlDLEVBR0FuRCxHQUFBb0QsZ0JBQUFDLFVBQ0FDLE9BQUEsU0FBQUMsRUFBQUMsR0FDQXBELEVBQUFtRCxHQUFBRSxPQUNBekQsR0FBQW9ELGdCQUFBTSxLQUFBSixPQUFBQyxFQUFBQyxHQUNBcEQsRUFBQW1ELEdBQUFWLE9BQUEsTUFLQSxJQUFBYyxHQUFBLEdBQUFoRSxVQUNBSyxJQUFBNEQsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUVBLEdBQUFwRSxHQUFBbUUsRUFBQSxLQUFBQyxDQUVBQyxTQUFBQyxJQUFBLG1CQUFBdEUsR0FDQVEsRUFBQSxVQUFBc0QsS0FBQTlELEdBQ0FRLEVBQUEsV0FBQXNELEtBQUEsNEJBS0FTLElBdUVBMUQsT0FBQXVDIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFxuLy8gLS0gTU9ERUwgLS0gLy9cblxudmFyIG1vZGVsID0ge1xuXHRkYXRhOiBudWxsLFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHQkLmdldEpTT04oJ2pzL3F1b3Rlcy5qc29uJylcblx0XHQuZG9uZShmdW5jdGlvbigganNvbiApIHtcblxuXHRcdFx0bW9kZWwuZGF0YSA9IGpzb247XG5cblx0XHRcdC8vIEZhZGUgaW4vb3V0IGN1c3RvbSBiaW5kaW5nXG5cdFx0XHRrby5iaW5kaW5nSGFuZGxlcnMuZmFkZVRleHQgPSB7XG5cdFx0XHQgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgICAgICQoZWxlbWVudCkuaGlkZSgpO1xuXHRcdFx0ICAgICAgICBrby5iaW5kaW5nSGFuZGxlcnMudGV4dC51cGRhdGUoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcik7XG5cdFx0XHQgICAgICAgICQoZWxlbWVudCkuZmFkZUluKDEwMDApO1xuXHRcdFx0ICAgIH0gICAgICAgIFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cdFx0fSlcblx0XHQuZmFpbChmdW5jdGlvbigganF4aHIsIHRleHRTdGF0dXMsIGVycm9yICkge1xuXG5cdFx0XHR2YXIgZXJyID0gdGV4dFN0YXR1cyArIFwiLCBcIiArIGVycm9yO1xuXHRcdFx0Ly8gU2hvdyBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZyggXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIgKTtcblx0XHRcdCQoJyNxdW90ZScpLnRleHQoZXJyKTtcblx0XHRcdCQoJyNhdXRob3InKS50ZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG52YXIgdGVtcDtcblxuLy8gLS0gVklFV01PREVMIC0tIC8vXG5cbmZ1bmN0aW9uIFZpZXdNb2RlbChlcnIpIHtcblxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHNlbGYuY3VycmVudFF1b3RlID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdHNlbGYuY3VycmVudEF1dGhvciA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRcblx0c2VsZi5uZXh0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBDbGVhciBxdW90ZSBhbmQgYXV0aG9yXG5cdFx0JCgnI3F1b3RlJykuaHRtbCgnJyk7XG5cdFx0JCgnI2F1dGhvcicpLmh0bWwoJycpO1xuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZSAmIGF1dGhvclxuXHRcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMi40ZW0nIH0pO1xuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnXCIgJyArIHNlbGYuY3VycmVudEF1dGhvcigpKSk7XG4gICAgfTtcblxuXHRzZWxmLndpa2lBdXRob3IgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBDbGVhciBxdW90ZSBhbmQgYXV0aG9yXG5cdFx0JCgnI3F1b3RlJykuaHRtbCgnJyk7XG5cdFx0JCgnI2F1dGhvcicpLmh0bWwoJycpO1xuXHRcdC8vIEFQSSBSZXF1ZXN0IFVSTFxuXHRcdHZhciB3aWtpVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/Zm9ybWF0PWpzb24mYWN0aW9uPXF1ZXJ5JnByb3A9ZXh0cmFjdHMmZXhpbnRybz0mZXhwbGFpbnRleHQ9JnRpdGxlcz0nICsgc2VsZi5jdXJyZW50QXV0aG9yKCkgKyAnJmNhbGxiYWNrPXdpa2lDYWxsYmFjayc7XG5cblx0ICAgIHZhciByZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGYuY3VycmVudFF1b3RlKCdDb3VsZCBub3QgbG9hZCBXaWtpcGVkaWEgYXJ0aWNsZScpO1xuXHQgICAgICAgIHNlbGYuY3VycmVudEF1dGhvcignZXJyb3InKTtcblx0XHR9LCAzMDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogd2lraVVybCxcblx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgICAgXHR2YXIgcGFnZXNObyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpWzBdO1xuXHQgICAgICAgIFx0dmFyIGFydGljbGUgPSBkYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VzTm9dLmV4dHJhY3Q7XG5cdCAgICAgICAgXHQkKCcjcXVvdGUnKS5jc3MoeyAnZm9udC1zaXplJzogJzEuMmVtJyB9KTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudFF1b3RlKGFydGljbGUpO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50QXV0aG9yKCdXaWtpcGVkaWEnKTtcblxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVxdWVzdFRpbWVvdXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9O1xuXG5cdHNlbGYuY29weUNvbmZpcm0gPSBmdW5jdGlvbigpIHtcblx0XHQkKCcjcXVvdGUnKS5mYWRlT3V0KDEwMCkuZmFkZUluKDEwMCk7XG5cdH07XG5cbiAgICAvLyBJbml0aWFsaXplIENsaXBib2FyZFxuXHRzZWxmLmNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmQoJyNjbGlwYm9hcmQnKTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
