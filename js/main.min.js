function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,r=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*r),a=model.data.quotes[t][n];e.currentQuote(""),e.currentAuthor(""),$("#quote").css({"font-size":"2.4em"}),e.currentQuote(a),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+'" '+e.currentAuthor()))},e.wikiAuthor=function(){var t="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+e.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){e.currentQuote("Could not load Wikipedia article"),e.currentAuthor("error")},3e3);$.ajax({url:t,dataType:"jsonp",success:function(t){var r=Object.keys(t.query.pages)[0],n=t.query.pages[r].extract;e.currentQuote(""),e.currentAuthor(""),$("#quote").css({"font-size":"1.2em"}),e.currentQuote(n),e.currentAuthor("Wikipedia"),clearTimeout(o)}})},e.copyConfirm=function(){console.log("Copied to clipboard!")},e.clipboard=new Clipboard("#clipboard")}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeText={update:function(t,e){$(t).hide(),ko.bindingHandlers.text.update(t,e),$(t).fadeIn(1e3)}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var r=e+", "+o;console.log("Request Failed: "+r),$("#quote").text(r),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsIiQiLCJjc3MiLCJmb250LXNpemUiLCJ0d2VldFF1b3RlIiwid2luZG93Iiwib3BlbiIsImVuY29kZVVSSUNvbXBvbmVudCIsIndpa2lBdXRob3IiLCJ3aWtpVXJsIiwicmVxdWVzdFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYWpheCIsInVybCIsImRhdGFUeXBlIiwic3VjY2VzcyIsInBhZ2VzTm8iLCJxdWVyeSIsInBhZ2VzIiwiYXJ0aWNsZSIsImV4dHJhY3QiLCJjbGVhclRpbWVvdXQiLCJjb3B5Q29uZmlybSIsImNvbnNvbGUiLCJsb2ciLCJjbGlwYm9hcmQiLCJDbGlwYm9hcmQiLCJpbml0IiwiZ2V0SlNPTiIsImRvbmUiLCJqc29uIiwiYmluZGluZ0hhbmRsZXJzIiwiZmFkZVRleHQiLCJ1cGRhdGUiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsImhpZGUiLCJ0ZXh0IiwiZmFkZUluIiwidm0iLCJhcHBseUJpbmRpbmdzIiwiZmFpbCIsImpxeGhyIiwidGV4dFN0YXR1cyIsImVycm9yIiwidGVtcCJdLCJtYXBwaW5ncyI6IkFBdUNBLFFBQUFBLFdBQUFDLEdBRUEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsYUFBQUMsR0FBQUMsV0FBQSxJQUNBSixFQUFBSyxjQUFBRixHQUFBQyxXQUFBLElBRUFKLEVBQUFNLFVBQUEsV0FHQU4sRUFBQU8sYUFBQVAsRUFBQU8sV0FBQUMsT0FBQUMsS0FBQUMsTUFBQUMsS0FBQUMsU0FBQUMsT0FDQSxJQUFBQyxHQUFBQyxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBakIsRUFBQU8sWUFDQVcsRUFBQVIsTUFBQUMsS0FBQUMsUUFBQUUsR0FBQUssS0FFQUMsRUFBQVosT0FBQUMsS0FBQUMsTUFBQUMsS0FBQVUsT0FBQVAsSUFBQUQsT0FDQVMsRUFBQVAsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQUcsR0FDQUcsRUFBQWIsTUFBQUMsS0FBQVUsT0FBQVAsR0FBQVEsRUFFQXRCLEdBQUFFLGFBQUEsSUFDQUYsRUFBQUssY0FBQSxJQUNBbUIsRUFBQSxVQUFBQyxLQUFBQyxZQUFBLFVBQ0ExQixFQUFBRSxhQUFBcUIsR0FDQXZCLEVBQUFLLGNBQUFhLElBR0FsQixFQUFBMkIsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBOUIsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFHQUwsRUFBQStCLFdBQUEsV0FHQSxHQUFBQyxHQUFBLDBHQUFBaEMsRUFBQUssZ0JBQUEseUJBRUE0QixFQUFBQyxXQUFBLFdBQ0FsQyxFQUFBRSxhQUFBLG9DQUNBRixFQUFBSyxjQUFBLFVBQ0EsSUFFQW1CLEdBQUFXLE1BQ0FDLElBQUFKLEVBQ0FLLFNBQUEsUUFDQUMsUUFBQSxTQUFBM0IsR0FDQSxHQUFBNEIsR0FBQS9CLE9BQUFDLEtBQUFFLEVBQUE2QixNQUFBQyxPQUFBLEdBQ0FDLEVBQUEvQixFQUFBNkIsTUFBQUMsTUFBQUYsR0FBQUksT0FFQTNDLEdBQUFFLGFBQUEsSUFDQUYsRUFBQUssY0FBQSxJQUNBbUIsRUFBQSxVQUFBQyxLQUFBQyxZQUFBLFVBQ0ExQixFQUFBRSxhQUFBd0MsR0FDQTFDLEVBQUFLLGNBQUEsYUFFQXVDLGFBQUFYLE9BS0FqQyxFQUFBNkMsWUFBQSxXQUNBQyxRQUFBQyxJQUFBLHlCQUlBL0MsRUFBQWdELFVBQUEsR0FBQUMsV0FBQSxjQWxHQSxHQUFBdkMsUUFDQUMsS0FBQSxLQUNBdUMsS0FBQSxXQUNBMUIsRUFBQTJCLFFBQUEsa0JBQ0FDLEtBQUEsU0FBQUMsR0FFQTNDLE1BQUFDLEtBQUEwQyxFQUdBbEQsR0FBQW1ELGdCQUFBQyxVQUNBQyxPQUFBLFNBQUFDLEVBQUFDLEdBQ0FsQyxFQUFBaUMsR0FBQUUsT0FDQXhELEdBQUFtRCxnQkFBQU0sS0FBQUosT0FBQUMsRUFBQUMsR0FDQWxDLEVBQUFpQyxHQUFBSSxPQUFBLE1BS0EsSUFBQUMsR0FBQSxHQUFBaEUsVUFDQUssSUFBQTRELGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FFQSxHQUFBcEUsR0FBQW1FLEVBQUEsS0FBQUMsQ0FFQXJCLFNBQUFDLElBQUEsbUJBQUFoRCxHQUNBeUIsRUFBQSxVQUFBb0MsS0FBQTdELEdBQ0F5QixFQUFBLFdBQUFvQyxLQUFBLDRCQUtBUSxJQXdFQTFELE9BQUF3QyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcbi8vIC0tIE1PREVMIC0tIC8vXG5cbnZhciBtb2RlbCA9IHtcblx0ZGF0YTogbnVsbCxcblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0JC5nZXRKU09OKCdqcy9xdW90ZXMuanNvbicpXG5cdFx0LmRvbmUoZnVuY3Rpb24oIGpzb24gKSB7XG5cblx0XHRcdG1vZGVsLmRhdGEgPSBqc29uO1xuXG5cdFx0XHQvLyBGYWRlIGluL291dCBjdXN0b20gYmluZGluZ1xuXHRcdFx0a28uYmluZGluZ0hhbmRsZXJzLmZhZGVUZXh0ID0ge1xuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmhpZGUoKTtcblx0XHRcdCAgICAgICAga28uYmluZGluZ0hhbmRsZXJzLnRleHQudXBkYXRlKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpO1xuXHRcdFx0ICAgICAgICAkKGVsZW1lbnQpLmZhZGVJbigxMDAwKTtcblx0XHRcdCAgICB9ICAgICAgICBcblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxudmFyIHRlbXA7XG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0XG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0c2VsZi5jdXJyZW50UXVvdGUoJycpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcignJyk7XG5cdFx0JCgnI3F1b3RlJykuY3NzKHsgJ2ZvbnQtc2l6ZSc6ICcyLjRlbScgfSk7XG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xuXG5cdHNlbGYud2lraUF1dGhvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFxuXHRcdC8vIEFQSSBSZXF1ZXN0IFVSTFxuXHRcdHZhciB3aWtpVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/Zm9ybWF0PWpzb24mYWN0aW9uPXF1ZXJ5JnByb3A9ZXh0cmFjdHMmZXhpbnRybz0mZXhwbGFpbnRleHQ9JnRpdGxlcz0nICsgc2VsZi5jdXJyZW50QXV0aG9yKCkgKyAnJmNhbGxiYWNrPXdpa2lDYWxsYmFjayc7XG5cblx0ICAgIHZhciByZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGYuY3VycmVudFF1b3RlKCdDb3VsZCBub3QgbG9hZCBXaWtpcGVkaWEgYXJ0aWNsZScpO1xuXHQgICAgICAgIHNlbGYuY3VycmVudEF1dGhvcignZXJyb3InKTtcblx0XHR9LCAzMDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogd2lraVVybCxcblx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgICAgXHR2YXIgcGFnZXNObyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpWzBdO1xuXHQgICAgICAgIFx0dmFyIGFydGljbGUgPSBkYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VzTm9dLmV4dHJhY3Q7XG5cdCAgICAgICAgXHQvLyBDbGVhciBxdW90ZSBhbmQgYXV0aG9yXG5cdFx0XHRcdHNlbGYuY3VycmVudFF1b3RlKCcnKTtcblx0XHRcdFx0c2VsZi5jdXJyZW50QXV0aG9yKCcnKTtcblx0ICAgICAgICBcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMS4yZW0nIH0pO1xuXHQgICAgICAgIFx0c2VsZi5jdXJyZW50UXVvdGUoYXJ0aWNsZSk7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRBdXRob3IoJ1dpa2lwZWRpYScpO1xuXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dChyZXF1ZXN0VGltZW91dCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH07XG5cblx0c2VsZi5jb3B5Q29uZmlybSA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdDb3BpZWQgdG8gY2xpcGJvYXJkIScpO1xuXHR9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG59XG5cblxuLy8gLS0gSW5pdGlhbGl6ZSBDb21wb25lbnRzIC0tIC8vXG5cbm1vZGVsLmluaXQoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
