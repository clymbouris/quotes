function ViewModel(t){var e=this;e.animate=ko.observable(!1),e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.animate(!1),e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,a=Object.keys(model.data.quotes[t]).length,n=Math.floor(Math.random()*a),u=model.data.quotes[t][n];e.currentQuote(u),e.currentAuthor(o),e.animate(!0)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+" - "+e.author()))}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeVisible={init:function(t,e){},update:function(t,e){$("#quote").fadeOut().fadeIn()}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var a=e+", "+o;console.log("Request Failed: "+a),$("#quote").text(a),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImFuaW1hdGUiLCJrbyIsIm9ic2VydmFibGUiLCJjdXJyZW50UXVvdGUiLCJjdXJyZW50QXV0aG9yIiwibmV4dFF1b3RlIiwiYXV0aG9yc01heCIsIk9iamVjdCIsImtleXMiLCJtb2RlbCIsImRhdGEiLCJhdXRob3JzIiwibGVuZ3RoIiwiYVJhbmRvbSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImF1dGhvciIsIm5hbWUiLCJxdW90ZXNNYXgiLCJxdW90ZXMiLCJxUmFuZG9tIiwicXVvdGUiLCJ0d2VldFF1b3RlIiwid2luZG93Iiwib3BlbiIsImVuY29kZVVSSUNvbXBvbmVudCIsImluaXQiLCIkIiwiZ2V0SlNPTiIsImRvbmUiLCJqc29uIiwiYmluZGluZ0hhbmRsZXJzIiwiZmFkZVZpc2libGUiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsInVwZGF0ZSIsImZhZGVPdXQiLCJmYWRlSW4iLCJ2bSIsImFwcGx5QmluZGluZ3MiLCJmYWlsIiwianF4aHIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBeUNBLFFBQUFBLFdBQUFDLEdBRUEsR0FBQUMsR0FBQUMsSUFDQUQsR0FBQUUsUUFBQUMsR0FBQUMsWUFBQSxHQUNBSixFQUFBSyxhQUFBRixHQUFBQyxXQUFBLElBQ0FKLEVBQUFNLGNBQUFILEdBQUFDLFdBQUEsSUFFQUosRUFBQU8sVUFBQSxXQUNBUCxFQUFBRSxTQUFBLEdBRUFGLEVBQUFRLGFBQUFSLEVBQUFRLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQWxCLEVBQUFRLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUF2QixHQUFBSyxhQUFBbUIsR0FDQXhCLEVBQUFNLGNBQUFhLEdBQ0FuQixFQUFBRSxTQUFBLElBR0FGLEVBQUF5QixXQUFBLFdBQ0FDLE9BQUFDLEtBQUEsOEVBQ0FDLG1CQUFBLElBQUE1QixFQUFBSyxlQUFBLE1BQUFMLEVBQUFtQixZQS9EQSxHQUFBUixRQUNBQyxLQUFBLEtBQ0FpQixLQUFBLFdBQ0FDLEVBQUFDLFFBQUEsa0JBQ0FDLEtBQUEsU0FBQUMsR0FFQXRCLE1BQUFDLEtBQUFxQixFQUdBOUIsR0FBQStCLGdCQUFBQyxhQUNBTixLQUFBLFNBQUFPLEVBQUFDLEtBSUFDLE9BQUEsU0FBQUYsRUFBQUMsR0FFQVAsRUFBQSxVQUFBUyxVQUFBQyxVQUtBLElBQUFDLEdBQUEsR0FBQTNDLFVBQ0FLLElBQUF1QyxjQUFBRCxLQUVBRSxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBRUEsR0FBQS9DLEdBQUE4QyxFQUFBLEtBQUFDLENBRUFDLFNBQUFDLElBQUEsbUJBQUFqRCxHQUNBK0IsRUFBQSxVQUFBbUIsS0FBQWxELEdBQ0ErQixFQUFBLFdBQUFtQixLQUFBLDJCQXdDQXRDLE9BQUFrQiIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gLS0gTU9ERUwgLS0gLy9cblxudmFyIG1vZGVsID0ge1xuXHRkYXRhOiBudWxsLFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHQkLmdldEpTT04oJ2pzL3F1b3Rlcy5qc29uJylcblx0XHQuZG9uZShmdW5jdGlvbigganNvbiApIHtcblxuXHRcdFx0bW9kZWwuZGF0YSA9IGpzb247XG5cblx0XHRcdC8vIEZhZGUgaW4vb3V0IGN1c3RvbSBiaW5kaW5nXG5cdFx0XHRrby5iaW5kaW5nSGFuZGxlcnMuZmFkZVZpc2libGUgPSB7XG5cdFx0XHQgICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAvLyBJbml0aWFsbHkgc2V0IHRoZSBlbGVtZW50IHRvIGJlIGluc3RhbnRseSB2aXNpYmxlL2hpZGRlbiBkZXBlbmRpbmcgb24gdGhlIHZhbHVlXG5cblx0XHRcdCAgICB9LFxuXHRcdFx0ICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuXHRcdFx0ICAgICAgICAvLyBXaGVuZXZlciB0aGUgdmFsdWUgc3Vic2VxdWVudGx5IGNoYW5nZXMsIHNsb3dseSBmYWRlIHRoZSBlbGVtZW50IGluIG9yIG91dFxuXHRcdFx0ICAgICAgICAkKCcjcXVvdGUnKS5mYWRlT3V0KCkuZmFkZUluKCk7XG5cdFx0XHQgICAgfVxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gQ29udHJ1Y3QgVmlld01vZGVsIGFmdGVyIG1vZGVsIGlzIGxvYWRlZFxuXHRcdFx0dmFyIHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXHRcdFx0a28uYXBwbHlCaW5kaW5ncyh2bSk7XG5cdFx0fSlcblx0XHQuZmFpbChmdW5jdGlvbigganF4aHIsIHRleHRTdGF0dXMsIGVycm9yICkge1xuXG5cdFx0XHR2YXIgZXJyID0gdGV4dFN0YXR1cyArIFwiLCBcIiArIGVycm9yO1xuXHRcdFx0Ly8gU2hvdyBlcnJvciBtZXNzYWdlXG5cdFx0XHRjb25zb2xlLmxvZyggXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIgKTtcblx0XHRcdCQoJyNxdW90ZScpLnRleHQoZXJyKTtcblx0XHRcdCQoJyNhdXRob3InKS50ZXh0KCdzb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG5cbi8vIC0tIFZJRVdNT0RFTCAtLSAvL1xuXG5mdW5jdGlvbiBWaWV3TW9kZWwoZXJyKSB7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLmFuaW1hdGUgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHNlbGYuYW5pbWF0ZShmYWxzZSk7XG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlXG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHRcdHNlbGYuYW5pbWF0ZSh0cnVlKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnIC0gJyArIHNlbGYuYXV0aG9yKCkpKTtcbiAgICB9O1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
