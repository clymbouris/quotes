function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,n=Object.keys(model.data.quotes[e]).length,a=Math.floor(Math.random()*n),r=model.data.quotes[e][a];t.currentQuote(r),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))},t.clipboard=new Clipboard("#clipboard"),t.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),t.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),t.wiki=function(){var e="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+t.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){$("#wikipedia-header").text("Could not load WikiPedia articles")},8e3);$.ajax({url:e,dataType:"jsonp",success:function(e){console.log(e),clearTimeout(o)}})}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t)}).fail(function(e,t,o){var n=t+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwib24iLCJlIiwiY29uc29sZSIsImxvZyIsImFjdGlvbiIsInRleHQiLCJ0cmlnZ2VyIiwiY2xlYXJTZWxlY3Rpb24iLCJlcnJvciIsIndpa2kiLCJ3aWtpVXJsIiwicmVxdWVzdFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiJCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJjbGVhclRpbWVvdXQiLCJpbml0IiwiZ2V0SlNPTiIsImRvbmUiLCJqc29uIiwiYmluZGluZ0hhbmRsZXJzIiwiZmFkZVRleHQiLCJ1cGRhdGUiLCJlbGVtZW50IiwidmFsdWVBY2Nlc3NvciIsImhpZGUiLCJmYWRlSW4iLCJ2bSIsImFwcGx5QmluZGluZ3MiLCJmYWlsIiwianF4aHIiLCJ0ZXh0U3RhdHVzIl0sIm1hcHBpbmdzIjoiQUFzQ0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUNBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUdBTixFQUFBTyxhQUFBUCxFQUFBTyxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBdEIsR0FBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQXdCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQTNCLEVBQUFFLGVBQUEsS0FBQUYsRUFBQUssbUJBSUFMLEVBQUE0QixVQUFBLEdBQUFDLFdBQUEsY0FDQTdCLEVBQUE0QixVQUFBRSxHQUFBLFVBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxVQUFBRixFQUFBRyxRQUNBRixRQUFBQyxJQUFBLFFBQUFGLEVBQUFJLE1BQ0FILFFBQUFDLElBQUEsV0FBQUYsRUFBQUssU0FFQUwsRUFBQU0sbUJBRUFyQyxFQUFBNEIsVUFBQUUsR0FBQSxRQUFBLFNBQUFDLEdBQ0FDLFFBQUFNLE1BQUEsVUFBQVAsRUFBQUcsUUFDQUYsUUFBQU0sTUFBQSxXQUFBUCxFQUFBSyxXQUdBcEMsRUFBQXVDLEtBQUEsV0FFQSxHQUFBQyxHQUFBLDBHQUFBeEMsRUFBQUssZ0JBQUEseUJBRUFvQyxFQUFBQyxXQUFBLFdBQ0FDLEVBQUEscUJBQUFSLEtBQUEsc0NBQ0EsSUFFQVEsR0FBQUMsTUFDQUMsSUFBQUwsRUFDQU0sU0FBQSxRQUNBQyxRQUFBLFNBQUFwQyxHQUVBcUIsUUFBQUMsSUFBQXRCLEdBRUFxQyxhQUFBUCxPQTFGQSxHQUFBL0IsUUFDQUMsS0FBQSxLQUNBc0MsS0FBQSxXQUNBTixFQUFBTyxRQUFBLGtCQUNBQyxLQUFBLFNBQUFDLEdBRUExQyxNQUFBQyxLQUFBeUMsRUFHQWpELEdBQUFrRCxnQkFBQUMsVUFDQUMsT0FBQSxTQUFBQyxFQUFBQyxHQUNBZCxFQUFBYSxHQUFBRSxPQUNBdkQsR0FBQWtELGdCQUFBbEIsS0FBQW9CLE9BQUFDLEVBQUFDLEdBQ0FkLEVBQUFhLEdBQUFHLE9BQUEsTUFLQSxJQUFBQyxHQUFBLEdBQUE5RCxVQUNBSyxJQUFBMEQsY0FBQUQsS0FFQUUsS0FBQSxTQUFBQyxFQUFBQyxFQUFBMUIsR0FFQSxHQUFBdkMsR0FBQWlFLEVBQUEsS0FBQTFCLENBRUFOLFNBQUFDLElBQUEsbUJBQUFsQyxHQUNBNEMsRUFBQSxVQUFBUixLQUFBcEMsR0FDQTRDLEVBQUEsV0FBQVIsS0FBQSwyQkF3RUF6QixPQUFBdUMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVGV4dCA9IHtcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG5cdFx0XHQgICAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy50ZXh0LnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5mYWRlSW4oMTAwMCk7XG5cdFx0XHQgICAgfSAgICAgICAgXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDb250cnVjdCBWaWV3TW9kZWwgYWZ0ZXIgbW9kZWwgaXMgbG9hZGVkXG5cdFx0XHR2YXIgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cdFx0XHRrby5hcHBseUJpbmRpbmdzKHZtKTtcblx0XHR9KVxuXHRcdC5mYWlsKGZ1bmN0aW9uKCBqcXhociwgdGV4dFN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdHZhciBlcnIgPSB0ZXh0U3RhdHVzICsgXCIsIFwiICsgZXJyb3I7XG5cdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCBcIlJlcXVlc3QgRmFpbGVkOiBcIiArIGVyciApO1xuXHRcdFx0JCgnI3F1b3RlJykudGV4dChlcnIpO1xuXHRcdFx0JCgnI2F1dGhvcicpLnRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cblxuLy8gLS0gVklFV01PREVMIC0tIC8vXG5cbmZ1bmN0aW9uIFZpZXdNb2RlbChlcnIpIHtcblxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHNlbGYuY3VycmVudFF1b3RlID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdHNlbGYuY3VycmVudEF1dGhvciA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRcblx0c2VsZi5uZXh0UXVvdGUgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZSAmIGF1dGhvclxuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnXCIgJyArIHNlbGYuY3VycmVudEF1dGhvcigpKSk7XG4gICAgfTtcblxuICAgIC8vIEluaXRpYWxpemUgQ2xpcGJvYXJkXG5cdHNlbGYuY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZCgnI2NsaXBib2FyZCcpO1xuXHRzZWxmLmNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICBcdGNvbnNvbGUubG9nKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHQgICAgY29uc29sZS5sb2coJ1RleHQ6JywgZS50ZXh0KTtcblx0ICAgIGNvbnNvbGUubG9nKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7XG5cblx0ICAgIGUuY2xlYXJTZWxlY3Rpb24oKTtcblx0fSk7XG5cdHNlbGYuY2xpcGJvYXJkLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcblx0ICAgIGNvbnNvbGUuZXJyb3IoJ0FjdGlvbjonLCBlLmFjdGlvbik7XG5cdCAgICBjb25zb2xlLmVycm9yKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7XG5cdH0pO1xuXG5cdHNlbGYud2lraSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHdpa2lVcmwgPSAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3cvYXBpLnBocD9mb3JtYXQ9anNvbiZhY3Rpb249cXVlcnkmcHJvcD1leHRyYWN0cyZleGludHJvPSZleHBsYWludGV4dD0mdGl0bGVzPScgKyBzZWxmLmN1cnJlbnRBdXRob3IoKSArICcmY2FsbGJhY2s9d2lraUNhbGxiYWNrJztcblxuXHQgICAgdmFyIHJlcXVlc3RUaW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgJCgnI3dpa2lwZWRpYS1oZWFkZXInKS50ZXh0KFwiQ291bGQgbm90IGxvYWQgV2lraVBlZGlhIGFydGljbGVzXCIpO1xuXHRcdH0sIDgwMDApO1xuXG5cdCAgICAgJC5hamF4KCB7XG5cdCAgICAgICAgdXJsOiB3aWtpVXJsLFxuXHQgICAgICAgIGRhdGFUeXBlOiAnanNvbnAnLFxuXHQgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcblxuXHQgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcblxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVxdWVzdFRpbWVvdXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9O1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
