function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,n=Object.keys(model.data.quotes[e]).length,a=Math.floor(Math.random()*n),r=model.data.quotes[e][a];t.currentQuote(r),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))},t.clipboard=new Clipboard("#clipboard"),t.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),t.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),t.wiki=function(){var e="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+t.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){$("#wikipedia-header").text("Could not load WikiPedia extract")},8e3);$.ajax({url:e,dataType:"jsonp",success:function(e){var t=Object.keys(e.query.pages)[0],n=e.query.pages[t].extract;$("#quote").text(n),$("#author").text("Wikipedia"),console.log(n),clearTimeout(o)}})}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t)}).fail(function(e,t,o){var n=t+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2xpcGJvYXJkIiwiQ2xpcGJvYXJkIiwib24iLCJlIiwiY29uc29sZSIsImxvZyIsImFjdGlvbiIsInRleHQiLCJ0cmlnZ2VyIiwiY2xlYXJTZWxlY3Rpb24iLCJlcnJvciIsIndpa2kiLCJ3aWtpVXJsIiwicmVxdWVzdFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiJCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwiZmFkZUluIiwidm0iLCJhcHBseUJpbmRpbmdzIiwiZmFpbCIsImpxeGhyIiwidGV4dFN0YXR1cyIsInRlbXAiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFBQSxXQUFBQyxHQUVBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFFLGFBQUFDLEdBQUFDLFdBQUEsSUFDQUosRUFBQUssY0FBQUYsR0FBQUMsV0FBQSxJQUVBSixFQUFBTSxVQUFBLFdBR0FOLEVBQUFPLGFBQUFQLEVBQUFPLFdBQUFDLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFDLFNBQUFDLE9BQ0EsSUFBQUMsR0FBQUMsS0FBQUMsTUFBQUQsS0FBQUUsU0FBQWpCLEVBQUFPLFlBQ0FXLEVBQUFSLE1BQUFDLEtBQUFDLFFBQUFFLEdBQUFLLEtBRUFDLEVBQUFaLE9BQUFDLEtBQUFDLE1BQUFDLEtBQUFVLE9BQUFQLElBQUFELE9BQ0FTLEVBQUFQLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFHLEdBQ0FHLEVBQUFiLE1BQUFDLEtBQUFVLE9BQUFQLEdBQUFRLEVBRUF0QixHQUFBRSxhQUFBcUIsR0FDQXZCLEVBQUFLLGNBQUFhLElBR0FsQixFQUFBd0IsV0FBQSxXQUNBQyxPQUFBQyxLQUFBLDhFQUNBQyxtQkFBQSxJQUFBM0IsRUFBQUUsZUFBQSxLQUFBRixFQUFBSyxtQkFJQUwsRUFBQTRCLFVBQUEsR0FBQUMsV0FBQSxjQUNBN0IsRUFBQTRCLFVBQUFFLEdBQUEsVUFBQSxTQUFBQyxHQUNBQyxRQUFBQyxJQUFBLFVBQUFGLEVBQUFHLFFBQ0FGLFFBQUFDLElBQUEsUUFBQUYsRUFBQUksTUFDQUgsUUFBQUMsSUFBQSxXQUFBRixFQUFBSyxTQUVBTCxFQUFBTSxtQkFFQXJDLEVBQUE0QixVQUFBRSxHQUFBLFFBQUEsU0FBQUMsR0FDQUMsUUFBQU0sTUFBQSxVQUFBUCxFQUFBRyxRQUNBRixRQUFBTSxNQUFBLFdBQUFQLEVBQUFLLFdBR0FwQyxFQUFBdUMsS0FBQSxXQUVBLEdBQUFDLEdBQUEsMEdBQUF4QyxFQUFBSyxnQkFBQSx5QkFFQW9DLEVBQUFDLFdBQUEsV0FDQUMsRUFBQSxxQkFBQVIsS0FBQSxxQ0FDQSxJQUVBUSxHQUFBQyxNQUNBQyxJQUFBTCxFQUNBTSxTQUFBLFFBQ0FDLFFBQUEsU0FBQXBDLEdBQ0EsR0FBQXFDLEdBQUF4QyxPQUFBQyxLQUFBRSxFQUFBc0MsTUFBQUMsT0FBQSxHQUNBQyxFQUFBeEMsRUFBQXNDLE1BQUFDLE1BQUFGLEdBQUFJLE9BQ0FULEdBQUEsVUFBQVIsS0FBQWdCLEdBQ0FSLEVBQUEsV0FBQVIsS0FBQSxhQUNBSCxRQUFBQyxJQUFBa0IsR0FFQUUsYUFBQVosT0E5RkEsR0FBQS9CLFFBQ0FDLEtBQUEsS0FDQTJDLEtBQUEsV0FDQVgsRUFBQVksUUFBQSxrQkFDQUMsS0FBQSxTQUFBQyxHQUVBL0MsTUFBQUMsS0FBQThDLEVBR0F0RCxHQUFBdUQsZ0JBQUFDLFVBQ0FDLE9BQUEsU0FBQUMsRUFBQUMsR0FDQW5CLEVBQUFrQixHQUFBRSxPQUNBNUQsR0FBQXVELGdCQUFBdkIsS0FBQXlCLE9BQUFDLEVBQUFDLEdBQ0FuQixFQUFBa0IsR0FBQUcsT0FBQSxNQUtBLElBQUFDLEdBQUEsR0FBQW5FLFVBQ0FLLElBQUErRCxjQUFBRCxLQUVBRSxLQUFBLFNBQUFDLEVBQUFDLEVBQUEvQixHQUVBLEdBQUF2QyxHQUFBc0UsRUFBQSxLQUFBL0IsQ0FFQU4sU0FBQUMsSUFBQSxtQkFBQWxDLEdBQ0E0QyxFQUFBLFVBQUFSLEtBQUFwQyxHQUNBNEMsRUFBQSxXQUFBUixLQUFBLDRCQUtBbUMsSUF1RUE1RCxPQUFBNEMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVGV4dCA9IHtcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG5cdFx0XHQgICAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy50ZXh0LnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5mYWRlSW4oMTAwMCk7XG5cdFx0XHQgICAgfSAgICAgICAgXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDb250cnVjdCBWaWV3TW9kZWwgYWZ0ZXIgbW9kZWwgaXMgbG9hZGVkXG5cdFx0XHR2YXIgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cdFx0XHRrby5hcHBseUJpbmRpbmdzKHZtKTtcblx0XHR9KVxuXHRcdC5mYWlsKGZ1bmN0aW9uKCBqcXhociwgdGV4dFN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdHZhciBlcnIgPSB0ZXh0U3RhdHVzICsgXCIsIFwiICsgZXJyb3I7XG5cdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCBcIlJlcXVlc3QgRmFpbGVkOiBcIiArIGVyciApO1xuXHRcdFx0JCgnI3F1b3RlJykudGV4dChlcnIpO1xuXHRcdFx0JCgnI2F1dGhvcicpLnRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbnZhciB0ZW1wO1xuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gR2V0IHJhbmRvbSBhdXRob3Jcblx0XHRpZiAoIXNlbGYuYXV0aG9yc01heCkgc2VsZi5hdXRob3JzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5hdXRob3JzKS5sZW5ndGg7XG5cdFx0dmFyIGFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWxmLmF1dGhvcnNNYXgpO1xuXHRcdHZhciBhdXRob3IgPSBtb2RlbC5kYXRhLmF1dGhvcnNbYVJhbmRvbV0ubmFtZTtcblx0XHQvLyBHZXQgcmFuZG9tIHF1b3RlIGZyb20gYXV0aG9yXG5cdFx0dmFyIHF1b3Rlc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dKS5sZW5ndGg7XG5cdFx0dmFyIHFSYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBxdW90ZXNNYXgpO1xuXHRcdHZhciBxdW90ZSA9IG1vZGVsLmRhdGEucXVvdGVzW2FSYW5kb21dW3FSYW5kb21dO1xuXHRcdC8vIFVwZGF0ZSBjdXJyZW50IHF1b3RlICYgYXV0aG9yXG5cdFx0c2VsZi5jdXJyZW50UXVvdGUocXVvdGUpO1xuXHRcdHNlbGYuY3VycmVudEF1dGhvcihhdXRob3IpO1xuXHR9O1xuXG5cdHNlbGYudHdlZXRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHdpbmRvdy5vcGVuKCdodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD9oYXNodGFncz1xdW90ZXMmcmVsYXRlZD1mcmVlY29kZWNhbXAmdGV4dD0nICtcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCgnXCInICsgc2VsZi5jdXJyZW50UXVvdGUoKSArICdcIiAnICsgc2VsZi5jdXJyZW50QXV0aG9yKCkpKTtcbiAgICB9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBDbGlwYm9hcmRcblx0c2VsZi5jbGlwYm9hcmQgPSBuZXcgQ2xpcGJvYXJkKCcjY2xpcGJvYXJkJyk7XG5cdHNlbGYuY2xpcGJvYXJkLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuICAgIFx0Y29uc29sZS5sb2coJ0FjdGlvbjonLCBlLmFjdGlvbik7XG5cdCAgICBjb25zb2xlLmxvZygnVGV4dDonLCBlLnRleHQpO1xuXHQgICAgY29uc29sZS5sb2coJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblxuXHQgICAgZS5jbGVhclNlbGVjdGlvbigpO1xuXHR9KTtcblx0c2VsZi5jbGlwYm9hcmQub24oJ2Vycm9yJywgZnVuY3Rpb24oZSkge1xuXHQgICAgY29uc29sZS5lcnJvcignQWN0aW9uOicsIGUuYWN0aW9uKTtcblx0ICAgIGNvbnNvbGUuZXJyb3IoJ1RyaWdnZXI6JywgZS50cmlnZ2VyKTtcblx0fSk7XG5cblx0c2VsZi53aWtpID0gZnVuY3Rpb24oKSB7XG5cblx0XHR2YXIgd2lraVVybCA9ICdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9hcGkucGhwP2Zvcm1hdD1qc29uJmFjdGlvbj1xdWVyeSZwcm9wPWV4dHJhY3RzJmV4aW50cm89JmV4cGxhaW50ZXh0PSZ0aXRsZXM9JyArIHNlbGYuY3VycmVudEF1dGhvcigpICsgJyZjYWxsYmFjaz13aWtpQ2FsbGJhY2snO1xuXG5cdCAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0ICAgICAgICAkKCcjd2lraXBlZGlhLWhlYWRlcicpLnRleHQoXCJDb3VsZCBub3QgbG9hZCBXaWtpUGVkaWEgZXh0cmFjdFwiKTtcblx0XHR9LCA4MDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogd2lraVVybCxcblx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgICAgXHR2YXIgcGFnZXNObyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpWzBdO1xuXHQgICAgICAgIFx0dmFyIGFydGljbGUgPSBkYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VzTm9dLmV4dHJhY3Q7XG5cdCAgICAgICAgXHQkKCcjcXVvdGUnKS50ZXh0KGFydGljbGUpO1xuXHQgICAgICAgIFx0JCgnI2F1dGhvcicpLnRleHQoJ1dpa2lwZWRpYScpO1xuXHQgICAgICAgICAgICBjb25zb2xlLmxvZyhhcnRpY2xlKTtcblxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQocmVxdWVzdFRpbWVvdXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9O1xufVxuXG5cbi8vIC0tIEluaXRpYWxpemUgQ29tcG9uZW50cyAtLSAvL1xuXG5tb2RlbC5pbml0KCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
