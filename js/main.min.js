function ViewModel(e){var t=this;t.currentQuote=ko.observable(""),t.currentAuthor=ko.observable(""),t.nextQuote=function(){$("#quote").css({"font-size":"2.4em"}),t.authorsMax||(t.authorsMax=Object.keys(model.data.authors).length);var e=Math.floor(Math.random()*t.authorsMax),o=model.data.authors[e].name,r=Object.keys(model.data.quotes[e]).length,n=Math.floor(Math.random()*r),a=model.data.quotes[e][n];t.currentQuote(a),t.currentAuthor(o)},t.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+t.currentQuote()+'" '+t.currentAuthor()))},t.clipboard=new Clipboard("#clipboard"),t.clipboard.on("success",function(e){console.log("Action:",e.action),console.log("Text:",e.text),console.log("Trigger:",e.trigger),e.clearSelection()}),t.clipboard.on("error",function(e){console.error("Action:",e.action),console.error("Trigger:",e.trigger)}),t.wiki=function(){$("#quote").css({"font-size":"1.2em"});var e="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles="+t.currentAuthor()+"&callback=wikiCallback",o=setTimeout(function(){t.currentQuote("Could not load Wikipedia article"),t.currentAuthor("error")},3e3);$.ajax({url:e,dataType:"jsonp",success:function(e){var r=Object.keys(e.query.pages)[0],n=e.query.pages[r].extract;t.currentQuote(n),t.currentAuthor("Wikipedia"),clearTimeout(o)}})}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(e){model.data=e,ko.bindingHandlers.fadeText={update:function(e,t){$(e).hide(),ko.bindingHandlers.text.update(e,t),$(e).fadeIn(1e3)}};var t=new ViewModel;ko.applyBindings(t)}).fail(function(e,t,o){var r=t+", "+o;console.log("Request Failed: "+r),$("#quote").text(r),$("#author").text("something went wrong")})}},temp;model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCIkIiwiY3NzIiwiZm9udC1zaXplIiwiYXV0aG9yc01heCIsIk9iamVjdCIsImtleXMiLCJtb2RlbCIsImRhdGEiLCJhdXRob3JzIiwibGVuZ3RoIiwiYVJhbmRvbSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImF1dGhvciIsIm5hbWUiLCJxdW90ZXNNYXgiLCJxdW90ZXMiLCJxUmFuZG9tIiwicXVvdGUiLCJ0d2VldFF1b3RlIiwid2luZG93Iiwib3BlbiIsImVuY29kZVVSSUNvbXBvbmVudCIsImNsaXBib2FyZCIsIkNsaXBib2FyZCIsIm9uIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJhY3Rpb24iLCJ0ZXh0IiwidHJpZ2dlciIsImNsZWFyU2VsZWN0aW9uIiwiZXJyb3IiLCJ3aWtpIiwid2lraVVybCIsInJlcXVlc3RUaW1lb3V0Iiwic2V0VGltZW91dCIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJwYWdlc05vIiwicXVlcnkiLCJwYWdlcyIsImFydGljbGUiLCJleHRyYWN0IiwiY2xlYXJUaW1lb3V0IiwiaW5pdCIsImdldEpTT04iLCJkb25lIiwianNvbiIsImJpbmRpbmdIYW5kbGVycyIsImZhZGVUZXh0IiwidXBkYXRlIiwiZWxlbWVudCIsInZhbHVlQWNjZXNzb3IiLCJoaWRlIiwiZmFkZUluIiwidm0iLCJhcHBseUJpbmRpbmdzIiwiZmFpbCIsImpxeGhyIiwidGV4dFN0YXR1cyIsInRlbXAiXSwibWFwcGluZ3MiOiJBQXVDQSxRQUFBQSxXQUFBQyxHQUVBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFFLGFBQUFDLEdBQUFDLFdBQUEsSUFDQUosRUFBQUssY0FBQUYsR0FBQUMsV0FBQSxJQUVBSixFQUFBTSxVQUFBLFdBQ0FDLEVBQUEsVUFBQUMsS0FBQUMsWUFBQSxVQUVBVCxFQUFBVSxhQUFBVixFQUFBVSxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFwQixFQUFBVSxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBekIsR0FBQUUsYUFBQXdCLEdBQ0ExQixFQUFBSyxjQUFBZ0IsSUFHQXJCLEVBQUEyQixXQUFBLFdBQ0FDLE9BQUFDLEtBQUEsOEVBQ0FDLG1CQUFBLElBQUE5QixFQUFBRSxlQUFBLEtBQUFGLEVBQUFLLG1CQUlBTCxFQUFBK0IsVUFBQSxHQUFBQyxXQUFBLGNBQ0FoQyxFQUFBK0IsVUFBQUUsR0FBQSxVQUFBLFNBQUFDLEdBQ0FDLFFBQUFDLElBQUEsVUFBQUYsRUFBQUcsUUFDQUYsUUFBQUMsSUFBQSxRQUFBRixFQUFBSSxNQUNBSCxRQUFBQyxJQUFBLFdBQUFGLEVBQUFLLFNBRUFMLEVBQUFNLG1CQUVBeEMsRUFBQStCLFVBQUFFLEdBQUEsUUFBQSxTQUFBQyxHQUNBQyxRQUFBTSxNQUFBLFVBQUFQLEVBQUFHLFFBQ0FGLFFBQUFNLE1BQUEsV0FBQVAsRUFBQUssV0FHQXZDLEVBQUEwQyxLQUFBLFdBQ0FuQyxFQUFBLFVBQUFDLEtBQUFDLFlBQUEsU0FDQSxJQUFBa0MsR0FBQSwwR0FBQTNDLEVBQUFLLGdCQUFBLHlCQUVBdUMsRUFBQUMsV0FBQSxXQUNBN0MsRUFBQUUsYUFBQSxvQ0FDQUYsRUFBQUssY0FBQSxVQUNBLElBRUFFLEdBQUF1QyxNQUNBQyxJQUFBSixFQUNBSyxTQUFBLFFBQ0FDLFFBQUEsU0FBQW5DLEdBQ0EsR0FBQW9DLEdBQUF2QyxPQUFBQyxLQUFBRSxFQUFBcUMsTUFBQUMsT0FBQSxHQUNBQyxFQUFBdkMsRUFBQXFDLE1BQUFDLE1BQUFGLEdBQUFJLE9BQ0F0RCxHQUFBRSxhQUFBbUQsR0FDQXJELEVBQUFLLGNBQUEsYUFFQWtELGFBQUFYLE9BOUZBLEdBQUEvQixRQUNBQyxLQUFBLEtBQ0EwQyxLQUFBLFdBQ0FqRCxFQUFBa0QsUUFBQSxrQkFDQUMsS0FBQSxTQUFBQyxHQUVBOUMsTUFBQUMsS0FBQTZDLEVBR0F4RCxHQUFBeUQsZ0JBQUFDLFVBQ0FDLE9BQUEsU0FBQUMsRUFBQUMsR0FDQXpELEVBQUF3RCxHQUFBRSxPQUNBOUQsR0FBQXlELGdCQUFBdEIsS0FBQXdCLE9BQUFDLEVBQUFDLEdBQ0F6RCxFQUFBd0QsR0FBQUcsT0FBQSxNQUtBLElBQUFDLEdBQUEsR0FBQXJFLFVBQ0FLLElBQUFpRSxjQUFBRCxLQUVBRSxLQUFBLFNBQUFDLEVBQUFDLEVBQUE5QixHQUVBLEdBQUExQyxHQUFBd0UsRUFBQSxLQUFBOUIsQ0FFQU4sU0FBQUMsSUFBQSxtQkFBQXJDLEdBQ0FRLEVBQUEsVUFBQStCLEtBQUF2QyxHQUNBUSxFQUFBLFdBQUErQixLQUFBLDRCQUtBa0MsSUF1RUEzRCxPQUFBMkMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVGV4dCA9IHtcblx0XHRcdCAgICB1cGRhdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG5cdFx0XHQgICAgICAgIGtvLmJpbmRpbmdIYW5kbGVycy50ZXh0LnVwZGF0ZShlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKTtcblx0XHRcdCAgICAgICAgJChlbGVtZW50KS5mYWRlSW4oMTAwMCk7XG5cdFx0XHQgICAgfSAgICAgICAgXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBDb250cnVjdCBWaWV3TW9kZWwgYWZ0ZXIgbW9kZWwgaXMgbG9hZGVkXG5cdFx0XHR2YXIgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cdFx0XHRrby5hcHBseUJpbmRpbmdzKHZtKTtcblx0XHR9KVxuXHRcdC5mYWlsKGZ1bmN0aW9uKCBqcXhociwgdGV4dFN0YXR1cywgZXJyb3IgKSB7XG5cblx0XHRcdHZhciBlcnIgPSB0ZXh0U3RhdHVzICsgXCIsIFwiICsgZXJyb3I7XG5cdFx0XHQvLyBTaG93IGVycm9yIG1lc3NhZ2Vcblx0XHRcdGNvbnNvbGUubG9nKCBcIlJlcXVlc3QgRmFpbGVkOiBcIiArIGVyciApO1xuXHRcdFx0JCgnI3F1b3RlJykudGV4dChlcnIpO1xuXHRcdFx0JCgnI2F1dGhvcicpLnRleHQoJ3NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbnZhciB0ZW1wO1xuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0c2VsZi5jdXJyZW50UXVvdGUgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0c2VsZi5jdXJyZW50QXV0aG9yID0ga28ub2JzZXJ2YWJsZSgnJyk7XG5cdFxuXHRzZWxmLm5leHRRdW90ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMi40ZW0nIH0pO1xuXHRcdC8vIEdldCByYW5kb20gYXV0aG9yXG5cdFx0aWYgKCFzZWxmLmF1dGhvcnNNYXgpIHNlbGYuYXV0aG9yc01heCA9IE9iamVjdC5rZXlzKG1vZGVsLmRhdGEuYXV0aG9ycykubGVuZ3RoO1xuXHRcdHZhciBhUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VsZi5hdXRob3JzTWF4KTtcblx0XHR2YXIgYXV0aG9yID0gbW9kZWwuZGF0YS5hdXRob3JzW2FSYW5kb21dLm5hbWU7XG5cdFx0Ly8gR2V0IHJhbmRvbSBxdW90ZSBmcm9tIGF1dGhvclxuXHRcdHZhciBxdW90ZXNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXSkubGVuZ3RoO1xuXHRcdHZhciBxUmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcXVvdGVzTWF4KTtcblx0XHR2YXIgcXVvdGUgPSBtb2RlbC5kYXRhLnF1b3Rlc1thUmFuZG9tXVtxUmFuZG9tXTtcblx0XHQvLyBVcGRhdGUgY3VycmVudCBxdW90ZSAmIGF1dGhvclxuXHRcdHNlbGYuY3VycmVudFF1b3RlKHF1b3RlKTtcblx0XHRzZWxmLmN1cnJlbnRBdXRob3IoYXV0aG9yKTtcblx0fTtcblxuXHRzZWxmLnR3ZWV0UXVvdGUgPSBmdW5jdGlvbigpIHtcblx0XHR3aW5kb3cub3BlbignaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/aGFzaHRhZ3M9cXVvdGVzJnJlbGF0ZWQ9ZnJlZWNvZGVjYW1wJnRleHQ9JyArXG5cdFx0XHRlbmNvZGVVUklDb21wb25lbnQoJ1wiJyArIHNlbGYuY3VycmVudFF1b3RlKCkgKyAnXCIgJyArIHNlbGYuY3VycmVudEF1dGhvcigpKSk7XG4gICAgfTtcblxuICAgIC8vIEluaXRpYWxpemUgQ2xpcGJvYXJkXG5cdHNlbGYuY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZCgnI2NsaXBib2FyZCcpO1xuXHRzZWxmLmNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcbiAgICBcdGNvbnNvbGUubG9nKCdBY3Rpb246JywgZS5hY3Rpb24pO1xuXHQgICAgY29uc29sZS5sb2coJ1RleHQ6JywgZS50ZXh0KTtcblx0ICAgIGNvbnNvbGUubG9nKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7XG5cblx0ICAgIGUuY2xlYXJTZWxlY3Rpb24oKTtcblx0fSk7XG5cdHNlbGYuY2xpcGJvYXJkLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcblx0ICAgIGNvbnNvbGUuZXJyb3IoJ0FjdGlvbjonLCBlLmFjdGlvbik7XG5cdCAgICBjb25zb2xlLmVycm9yKCdUcmlnZ2VyOicsIGUudHJpZ2dlcik7XG5cdH0pO1xuXG5cdHNlbGYud2lraSA9IGZ1bmN0aW9uKCkge1xuXHRcdCQoJyNxdW90ZScpLmNzcyh7ICdmb250LXNpemUnOiAnMS4yZW0nIH0pO1xuXHRcdHZhciB3aWtpVXJsID0gJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2FwaS5waHA/Zm9ybWF0PWpzb24mYWN0aW9uPXF1ZXJ5JnByb3A9ZXh0cmFjdHMmZXhpbnRybz0mZXhwbGFpbnRleHQ9JnRpdGxlcz0nICsgc2VsZi5jdXJyZW50QXV0aG9yKCkgKyAnJmNhbGxiYWNrPXdpa2lDYWxsYmFjayc7XG5cblx0ICAgIHZhciByZXF1ZXN0VGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHNlbGYuY3VycmVudFF1b3RlKCdDb3VsZCBub3QgbG9hZCBXaWtpcGVkaWEgYXJ0aWNsZScpO1xuXHQgICAgICAgIHNlbGYuY3VycmVudEF1dGhvcignZXJyb3InKTtcblx0XHR9LCAzMDAwKTtcblxuXHQgICAgICQuYWpheCgge1xuXHQgICAgICAgIHVybDogd2lraVVybCxcblx0ICAgICAgICBkYXRhVHlwZTogJ2pzb25wJyxcblx0ICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG5cdCAgICAgICAgXHR2YXIgcGFnZXNObyA9IE9iamVjdC5rZXlzKGRhdGEucXVlcnkucGFnZXMpWzBdO1xuXHQgICAgICAgIFx0dmFyIGFydGljbGUgPSBkYXRhLnF1ZXJ5LnBhZ2VzW3BhZ2VzTm9dLmV4dHJhY3Q7XG5cdCAgICAgICAgXHRzZWxmLmN1cnJlbnRRdW90ZShhcnRpY2xlKTtcblx0ICAgICAgICBcdHNlbGYuY3VycmVudEF1dGhvcignV2lraXBlZGlhJyk7XG5cblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHJlcXVlc3RUaW1lb3V0KTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
