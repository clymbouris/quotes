function ViewModel(t){var e=this;e.currentQuote=ko.observable(""),e.currentAuthor=ko.observable(""),e.nextQuote=function(){e.authorsMax||(e.authorsMax=Object.keys(model.data.authors).length);var t=Math.floor(Math.random()*e.authorsMax),o=model.data.authors[t].name,n=Object.keys(model.data.quotes[t]).length,a=Math.floor(Math.random()*n),u=model.data.quotes[t][a];e.currentQuote(u),e.currentAuthor(o)},e.tweetQuote=function(){window.open("https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text="+encodeURIComponent('"'+e.currentQuote()+" - "+e.author()))}}var model={data:null,init:function(){$.getJSON("js/quotes.json").done(function(t){model.data=t,ko.bindingHandlers.fadeVisible={init:function(t,e){e()},update:function(t,e){e();$("#quote").fadeOut().fadeIn()}};var e=new ViewModel;ko.applyBindings(e)}).fail(function(t,e,o){var n=e+", "+o;console.log("Request Failed: "+n),$("#quote").text(n),$("#author").text("something went wrong")})}};model.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJWaWV3TW9kZWwiLCJlcnIiLCJzZWxmIiwidGhpcyIsImN1cnJlbnRRdW90ZSIsImtvIiwib2JzZXJ2YWJsZSIsImN1cnJlbnRBdXRob3IiLCJuZXh0UXVvdGUiLCJhdXRob3JzTWF4IiwiT2JqZWN0Iiwia2V5cyIsIm1vZGVsIiwiZGF0YSIsImF1dGhvcnMiLCJsZW5ndGgiLCJhUmFuZG9tIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYXV0aG9yIiwibmFtZSIsInF1b3Rlc01heCIsInF1b3RlcyIsInFSYW5kb20iLCJxdW90ZSIsInR3ZWV0UXVvdGUiLCJ3aW5kb3ciLCJvcGVuIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaW5pdCIsIiQiLCJnZXRKU09OIiwiZG9uZSIsImpzb24iLCJiaW5kaW5nSGFuZGxlcnMiLCJmYWRlVmlzaWJsZSIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwidXBkYXRlIiwiZmFkZU91dCIsImZhZGVJbiIsInZtIiwiYXBwbHlCaW5kaW5ncyIsImZhaWwiLCJqcXhociIsInRleHRTdGF0dXMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiQUEwQ0EsUUFBQUEsV0FBQUMsR0FFQSxHQUFBQyxHQUFBQyxJQUVBRCxHQUFBRSxhQUFBQyxHQUFBQyxXQUFBLElBQ0FKLEVBQUFLLGNBQUFGLEdBQUFDLFdBQUEsSUFFQUosRUFBQU0sVUFBQSxXQUdBTixFQUFBTyxhQUFBUCxFQUFBTyxXQUFBQyxPQUFBQyxLQUFBQyxNQUFBQyxLQUFBQyxTQUFBQyxPQUNBLElBQUFDLEdBQUFDLEtBQUFDLE1BQUFELEtBQUFFLFNBQUFqQixFQUFBTyxZQUNBVyxFQUFBUixNQUFBQyxLQUFBQyxRQUFBRSxHQUFBSyxLQUVBQyxFQUFBWixPQUFBQyxLQUFBQyxNQUFBQyxLQUFBVSxPQUFBUCxJQUFBRCxPQUNBUyxFQUFBUCxLQUFBQyxNQUFBRCxLQUFBRSxTQUFBRyxHQUNBRyxFQUFBYixNQUFBQyxLQUFBVSxPQUFBUCxHQUFBUSxFQUVBdEIsR0FBQUUsYUFBQXFCLEdBQ0F2QixFQUFBSyxjQUFBYSxJQUdBbEIsRUFBQXdCLFdBQUEsV0FDQUMsT0FBQUMsS0FBQSw4RUFDQUMsbUJBQUEsSUFBQTNCLEVBQUFFLGVBQUEsTUFBQUYsRUFBQWtCLFlBL0RBLEdBQUFSLFFBQ0FDLEtBQUEsS0FDQWlCLEtBQUEsV0FDQUMsRUFBQUMsUUFBQSxrQkFDQUMsS0FBQSxTQUFBQyxHQUVBdEIsTUFBQUMsS0FBQXFCLEVBR0E3QixHQUFBOEIsZ0JBQUFDLGFBQ0FOLEtBQUEsU0FBQU8sRUFBQUMsR0FFQUEsS0FFQUMsT0FBQSxTQUFBRixFQUFBQyxHQUVBQSxHQUNBUCxHQUFBLFVBQUFTLFVBQUFDLFVBS0EsSUFBQUMsR0FBQSxHQUFBMUMsVUFDQUssSUFBQXNDLGNBQUFELEtBRUFFLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FFQSxHQUFBOUMsR0FBQTZDLEVBQUEsS0FBQUMsQ0FFQUMsU0FBQUMsSUFBQSxtQkFBQWhELEdBQ0E4QixFQUFBLFVBQUFtQixLQUFBakQsR0FDQThCLEVBQUEsV0FBQW1CLEtBQUEsMkJBdUNBdEMsT0FBQWtCIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyAtLSBNT0RFTCAtLSAvL1xuXG52YXIgbW9kZWwgPSB7XG5cdGRhdGE6IG51bGwsXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdCQuZ2V0SlNPTignanMvcXVvdGVzLmpzb24nKVxuXHRcdC5kb25lKGZ1bmN0aW9uKCBqc29uICkge1xuXG5cdFx0XHRtb2RlbC5kYXRhID0ganNvbjtcblxuXHRcdFx0Ly8gRmFkZSBpbi9vdXQgY3VzdG9tIGJpbmRpbmdcblx0XHRcdGtvLmJpbmRpbmdIYW5kbGVycy5mYWRlVmlzaWJsZSA9IHtcblx0XHRcdCAgICBpbml0OiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgICAgIC8vIEluaXRpYWxseSBzZXQgdGhlIGVsZW1lbnQgdG8gYmUgaW5zdGFudGx5IHZpc2libGUvaGlkZGVuIGRlcGVuZGluZyBvbiB0aGUgdmFsdWVcblx0XHRcdCAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuXHRcdFx0ICAgIH0sXG5cdFx0XHQgICAgdXBkYXRlOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG5cdFx0XHQgICAgICAgIC8vIFdoZW5ldmVyIHRoZSB2YWx1ZSBzdWJzZXF1ZW50bHkgY2hhbmdlcywgc2xvd2x5IGZhZGUgdGhlIGVsZW1lbnQgaW4gb3Igb3V0XG5cdFx0XHQgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlQWNjZXNzb3IoKTtcblx0XHRcdCAgICAgICAgJCgnI3F1b3RlJykuZmFkZU91dCgpLmZhZGVJbigpO1xuXHRcdFx0ICAgIH1cblx0XHRcdH07XG5cblx0XHRcdC8vIENvbnRydWN0IFZpZXdNb2RlbCBhZnRlciBtb2RlbCBpcyBsb2FkZWRcblx0XHRcdHZhciB2bSA9IG5ldyBWaWV3TW9kZWwoKTtcblx0XHRcdGtvLmFwcGx5QmluZGluZ3Modm0pO1xuXHRcdH0pXG5cdFx0LmZhaWwoZnVuY3Rpb24oIGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvciApIHtcblxuXHRcdFx0dmFyIGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcblx0XHRcdC8vIFNob3cgZXJyb3IgbWVzc2FnZVxuXHRcdFx0Y29uc29sZS5sb2coIFwiUmVxdWVzdCBGYWlsZWQ6IFwiICsgZXJyICk7XG5cdFx0XHQkKCcjcXVvdGUnKS50ZXh0KGVycik7XG5cdFx0XHQkKCcjYXV0aG9yJykudGV4dCgnc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0XHR9KTtcblx0fVxufTtcblxuXG4vLyAtLSBWSUVXTU9ERUwgLS0gLy9cblxuZnVuY3Rpb24gVmlld01vZGVsKGVycikge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblxuXHRzZWxmLmN1cnJlbnRRdW90ZSA9IGtvLm9ic2VydmFibGUoJycpO1xuXHRzZWxmLmN1cnJlbnRBdXRob3IgPSBrby5vYnNlcnZhYmxlKCcnKTtcblx0XG5cdHNlbGYubmV4dFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBHZXQgcmFuZG9tIGF1dGhvclxuXHRcdGlmICghc2VsZi5hdXRob3JzTWF4KSBzZWxmLmF1dGhvcnNNYXggPSBPYmplY3Qua2V5cyhtb2RlbC5kYXRhLmF1dGhvcnMpLmxlbmd0aDtcblx0XHR2YXIgYVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHNlbGYuYXV0aG9yc01heCk7XG5cdFx0dmFyIGF1dGhvciA9IG1vZGVsLmRhdGEuYXV0aG9yc1thUmFuZG9tXS5uYW1lO1xuXHRcdC8vIEdldCByYW5kb20gcXVvdGUgZnJvbSBhdXRob3Jcblx0XHR2YXIgcXVvdGVzTWF4ID0gT2JqZWN0LmtleXMobW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV0pLmxlbmd0aDtcblx0XHR2YXIgcVJhbmRvbSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHF1b3Rlc01heCk7XG5cdFx0dmFyIHF1b3RlID0gbW9kZWwuZGF0YS5xdW90ZXNbYVJhbmRvbV1bcVJhbmRvbV07XG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcXVvdGVcblx0XHRzZWxmLmN1cnJlbnRRdW90ZShxdW90ZSk7XG5cdFx0c2VsZi5jdXJyZW50QXV0aG9yKGF1dGhvcik7XG5cdH07XG5cblx0c2VsZi50d2VldFF1b3RlID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93Lm9wZW4oJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P2hhc2h0YWdzPXF1b3RlcyZyZWxhdGVkPWZyZWVjb2RlY2FtcCZ0ZXh0PScgK1xuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCdcIicgKyBzZWxmLmN1cnJlbnRRdW90ZSgpICsgJyAtICcgKyBzZWxmLmF1dGhvcigpKSk7XG4gICAgfTtcbn1cblxuXG4vLyAtLSBJbml0aWFsaXplIENvbXBvbmVudHMgLS0gLy9cblxubW9kZWwuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
